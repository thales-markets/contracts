'use strict';

const { artifacts, contract, web3 } = require('hardhat');
const { toBN } = web3.utils;

const { assert, addSnapshotBeforeRestoreAfterEach } = require('../../utils/common');

const { toBytes32 } = require('../../../index');

var ethers2 = require('ethers');
var crypto = require('crypto');

const SECOND = 1000;
const HOUR = 3600;
const DAY = 86400;
const WEEK = 604800;

const YEAR = 31556926;
const ZERO_ADDRESS = '0x' + '0'.repeat(40);

const {
	fastForward,
	toUnit,
	currentTime,
	bytesToString,
	multiplyDecimalRound,
	divideDecimalRound,
} = require('../../utils')();

const {
	onlyGivenAddressCanInvoke,
	convertToDecimals,
	encodeCall,
	assertRevert,
} = require('../../utils/helpers');

contract('TheRundownConsumer', (accounts) => {
	const [manager, first, owner, second, third, fourth, safeBox, wrapper] = accounts;

	const ZERO_ADDRESS = '0x' + '0'.repeat(40);
	const MAX_NUMBER =
		'115792089237316195423570985008687907853269984665640564039457584007913129639935';

	const SportPositionContract = artifacts.require('SportPosition');
	const SportPositionalMarketContract = artifacts.require('SportPositionalMarket');
	const SportPositionalMarketDataContract = artifacts.require('SportPositionalMarketData');
	const SportPositionalMarketManagerContract = artifacts.require('SportPositionalMarketManager');
	const SportPositionalMarketFactoryContract = artifacts.require('SportPositionalMarketFactory');
	const SportsAMMContract = artifacts.require('SportsAMM');
	const ThalesContract = artifacts.require('contracts/Token/OpThales_L1.sol:OpThales');
	let Thales;
	let answer;
	let minimumPositioningDuration = 0;
	let minimumMarketMaturityDuration = 0;

	let marketQuestion,
		marketSource,
		endOfPositioning,
		fixedTicketPrice,
		positionAmount1,
		positionAmount2,
		positionAmount3,
		withdrawalAllowed,
		tag,
		paymentToken,
		phrases = [],
		deployedMarket,
		outcomePosition,
		outcomePosition2;

	let consumer;
	let verifier;
	let TherundownConsumerVerifier;
	let TherundownConsumerVerifierDeployed;
	let TherundownConsumer;
	let TherundownConsumerImplementation;
	let TherundownConsumerDeployed;
	let MockTherundownConsumerWrapper;
	let initializeConsumerData;
	let GamesOddsObtainerDeployed;
	let gamesQueue;
	let game_1_create;
	let game_1_update_after;
	let game_1_update_before;
	let game_1_resolve;
	let fightId;
	let fightIdTime;
	let fight_create;
	let fight_create_time;
	let fight_create_time_update;
	let fightCreatedTime;
	let fightCreatedTimeUpdate;
	let fightCreated;
	let fight_update;
	let fightUpdated;
	let game_fight_resolve;
	let gamesFightResolved;
	let game_fight_resolve_draw;
	let gamesFightResolvedDraw;
	let reqIdFightCreate;
	let reqIdFightCreateTime;
	let reqIdFightCreateTimeUpdate;
	let reqIdFightUpdate;
	let reqIdFightResolve;
	let reqIdFightResolveDraw;
	let gameid1;
	let oddsid;
	let oddsResult;
	let oddsid_1;
	let oddsResult_1;
	let oddsResultArray_1;
	let reqIdOdds_1;
	let oddsid_2;
	let oddsResult_2;
	let oddsResultArray_2;
	let reqIdOdds_2;
	let oddsid_total;
	let oddsResult_total;
	let oddsResultArray_total;
	let reqIdOdds_total;
	let oddsid_total_update;
	let oddsResult_total_update;
	let oddsResultArray_total_update;
	let reqIdOdds_total_update;
	let oddsid_total_update_line;
	let oddsResult_total_update_line;
	let oddsResultArray_total_update_line;
	let reqIdOdds_total_update_line;
	let oddsid_spread;
	let oddsResult_spread;
	let oddsResultArray_spread;
	let reqIdOdds_spread;
	let oddsid_spread_update;
	let oddsResult_spread_update;
	let oddsResultArray_spread_update;
	let reqIdOdds_spread_update;
	let oddsid_spread_update_line;
	let oddsResult_spread_update_line;
	let oddsResultArray_spread_update_line;
	let reqIdOdds_spread_update_line;
	let oddsResultArray;
	let reqIdOdds;
	let gameid2;
	let game_2_create;
	let game_2_resolve;
	let gamesCreated;
	let game1UpdatedAfter;
	let game1UpdatedBefore;
	let gamesResolved;
	let reqIdCreate;
	let reqId1UpdateAfter;
	let reqId1UpdateBefore;
	let reqIdResolve;
	let reqIdFootballCreate;
	let gameFootballid1;
	let gameFootballid2;
	let game_1_football_create;
	let game_2_football_create;
	let gamesFootballCreated;
	let game_1_football_resolve;
	let game_2_football_resolve;
	let reqIdResolveFoodball;
	let gamesResolvedFootball;
	let dummyAddress;
	let game_fight_canceled;
	let gamesFightCanceled;
	let reqIdFightCanceled;
	let nba_create_array,
		gamesCreated_single,
		nba_game_create,
		oddsid_create_all,
		oddsid_create_result_1,
		oddsid_create_result_array_1,
		reqIdOdds_create_1,
		oddsid_create_result_2,
		oddsid_create_result_array_2,
		reqIdOdds_create_2,
		game_1_resolve_spread_total_1,
		gamesResolved_single_1,
		gamesResolved_single_2,
		game_1_resolve_spread_total_2;

	let SportPositionalMarketManager,
		SportPositionalMarketFactory,
		SportPositionalMarketData,
		SportPositionalMarket,
		SportPositionalMarketMastercopy,
		SportPositionMastercopy,
		SportsAMM;

	const game1NBATime = 1646958600;
	const gameFootballTime = 1649876400;
	const fightTime = 1660089600;

	const sportId_4 = 4; // NBA
	const sportId_16 = 16; // CHL
	const sportId_7 = 7; // UFC

	beforeEach(async () => {
		SportPositionalMarketManager = await SportPositionalMarketManagerContract.new({
			from: manager,
		});
		SportPositionalMarketFactory = await SportPositionalMarketFactoryContract.new({
			from: manager,
		});
		SportPositionalMarketMastercopy = await SportPositionalMarketContract.new({ from: manager });
		SportPositionMastercopy = await SportPositionContract.new({ from: manager });
		SportPositionalMarketData = await SportPositionalMarketDataContract.new({ from: manager });
		SportsAMM = await SportsAMMContract.new({ from: manager });

		Thales = await ThalesContract.new({ from: owner });
		let GamesQueue = artifacts.require('GamesQueue');
		gamesQueue = await GamesQueue.new({ from: owner });
		await gamesQueue.initialize(owner, { from: owner });

		await gamesQueue.addToWhitelist(third, true, {
			from: owner,
		});

		await SportPositionalMarketManager.initialize(manager, Thales.address, { from: manager });
		await SportPositionalMarketFactory.initialize(manager, { from: manager });

		await SportPositionalMarketFactory.setSportPositionalMarketManager(
			SportPositionalMarketManager.address,
			{ from: manager }
		);
		await SportPositionalMarketFactory.setSportPositionalMarketMastercopy(
			SportPositionalMarketMastercopy.address,
			{ from: manager }
		);
		await SportPositionalMarketFactory.setSportPositionMastercopy(SportPositionMastercopy.address, {
			from: manager,
		});
		// await SportPositionalMarketFactory.setLimitOrderProvider(SportsAMM.address, { from: manager });
		await SportPositionalMarketFactory.setSportsAMM(SportsAMM.address, { from: manager });
		await SportPositionalMarketManager.setSportPositionalMarketFactory(
			SportPositionalMarketFactory.address,
			{ from: manager }
		);

		await SportPositionalMarketManager.setIsDoubleChanceSupported(true, { from: manager });

		await Thales.transfer(first, toUnit('1000'), { from: owner });
		await Thales.transfer(second, toUnit('1000'), { from: owner });
		await Thales.transfer(third, toUnit('1000'), { from: owner });

		// ids
		gameid1 = '0x6536306366613738303834366166363839373862343935373965356366333936';
		gameid2 = '0x3937346533663036386233333764313239656435633133646632376133326662';
		fightId = '0x3234376564326334663865313462396538343833353636353361373863393962';
		fightIdTime = '0x3837656631326534343130616538653331313830613663613464613961626363';

		// create game props
		game_1_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_2_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		gamesCreated = [game_1_create, game_2_create];
		reqIdCreate = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21666';

		// create fight props
		fight_create =
			'0x000000000000000000000000000000000000000000000000000000000000002032343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000062f2f500ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f100000000000000000000000000000000000000000000000000000000000007c9c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000011436c6179746f6e2043617270656e746572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4564676172204368616972657a00000000000000000000000000000000000000';
		fightCreated = [fight_create];
		reqIdFightCreate = '0x1e4ef9996d321a4445068689e63fe393a5860cc98a0df22da1ac877d8cfd37d3';

		fight_create_time =
			'0x0000000000000000000000000000000000000000000000000000000000000020383765663132653434313061653865333131383061366361346461396162636300000000000000000000000000000000000000000000000000000000635d8640ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000c41726e6f6c6420416c6c656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d43616c76696e204b617474617200000000000000000000000000000000000000';
		fightCreatedTime = [fight_create_time];
		reqIdFightCreateTime = '0x96855b411bc67057713b65061aaf3e24505a86ffe51fa0ac28e4b8dd3f2c4f4a';

		fight_create_time_update =
			'0x0000000000000000000000000000000000000000000000000000000000000020383765663132653434313061653865333131383061366361346461396162636300000000000000000000000000000000000000000000000000000000635db070ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000c41726e6f6c6420416c6c656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d43616c76696e204b617474617200000000000000000000000000000000000000';
		fightCreatedTimeUpdate = [fight_create_time_update];
		reqIdFightCreateTimeUpdate =
			'0x96855b411bc67057713b65061aaf3e24505a86ffe51fa0ac28e4b8dd3f2c4f4b';

		// update fight props
		fight_update =
			'0x0000000000000000000000000000000000000000000000000000000000000020323437656432633466386531346239653834383335363635336137386339396200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		fightUpdated = [fight_update];
		reqIdFightUpdate = '0x1e4ef9996d321a4445068689e63fe393a5860cc98a0df22da1ac877d8cfd37d7';

		// resolve game props
		reqIdFightResolve = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_resolve =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000062f2f500';
		gamesFightResolved = [game_fight_resolve];

		reqIdFightCanceled = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_canceled =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062f2d8e0';
		gamesFightCanceled = [game_fight_canceled];

		reqIdFightResolveDraw = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_resolve_draw =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000062f2f500';
		gamesFightResolvedDraw = [game_fight_resolve_draw];

		// create game props
		game_1_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_2_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		gamesCreated = [game_1_create, game_2_create];
		gamesCreated_single = [game_1_create];
		reqIdCreate = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21666';

		// update game props
		game_1_update_after =
			'0x000000000000000000000000000000000000000000000000000000000000002065363063666137383038343661663638393738623439353739653563663339360000000000000000000000000000000000000000000000000000000062577210ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_1_update_before =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625739D0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game1UpdatedAfter = [game_1_update_after];
		reqId1UpdateAfter = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21667';

		game1UpdatedBefore = [game_1_update_before];
		reqId1UpdateBefore = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21668';

		// resolve game props
		reqIdResolve = '0x30250573c4b099aeaf06273ef9fbdfe32ab2d6b8e33420de988be5d6886c92a7';
		game_1_resolve =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000081000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';
		game_2_resolve =
			'0x393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000071000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';
		gamesResolved = [game_1_resolve, game_2_resolve];

		game_1_resolve_spread_total_1 =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';

		gamesResolved_single_1 = [game_1_resolve_spread_total_1];

		game_1_resolve_spread_total_2 =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';

		gamesResolved_single_2 = [game_1_resolve_spread_total_2];

		// football matches
		reqIdFootballCreate = '0x61d7dd698383c58c7217cf366764a1e92a1f059b1b6ea799dce4030a942302f4';
		gameFootballid1 = '0x3163626162623163303138373465363263313661316462333164363164353333';
		gameFootballid2 = '0x3662646437313731316337393837643336643465333538643937393237356234';
		game_1_football_create =
			'0x000000000000000000000000000000000000000000000000000000000000002031636261626231633031383734653632633136613164623331643631643533330000000000000000000000000000000000000000000000000000000062571db00000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a4000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001f41746c657469636f204d61647269642041746c657469636f204d616472696400000000000000000000000000000000000000000000000000000000000000001f4d616e636865737465722043697479204d616e63686573746572204369747900';
		game_2_football_create =
			'0x000000000000000000000000000000000000000000000000000000000000002036626464373137313163373938376433366434653335386439373932373562340000000000000000000000000000000000000000000000000000000062571db0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff76800000000000000000000000000000000000000000000000000000000000018c18000000000000000000000000000000000000000000000000000000000000cb2000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000134c69766572706f6f6c204c69766572706f6f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42656e666963612042656e666963610000000000000000000000000000000000';
		gamesFootballCreated = [game_1_football_create, game_2_football_create];
		game_1_football_resolve =
			'0x316362616262316330313837346536326331366131646233316436316435333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000062571db0';
		game_2_football_resolve =
			'0x366264643731373131633739383764333664346533353864393739323735623400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000062571db0';
		reqIdResolveFoodball = '0xff8887a8535b7a8030962e6f6b1eba61c0f1cb82f706e77d834f15c781e47697';
		gamesResolvedFootball = [game_1_football_resolve, game_2_football_resolve];

		oddsid = '0x6135363061373861363135353239363137366237393232353866616336613532';
		/**
		 * gameOdds = {
			gameId: "0x6135363061373861363135353239363137366237393232353866616336613532",
			homeOdds: "0",
			awayOdds: "0",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult =
			'0x61353630613738613631353532393631373662373932323538666163366135320000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a
		oddsResultArray = [oddsResult];
		reqIdOdds = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_1 = '0x3163626162623163303138373465363263313661316462333164363164353333';
		/**
		 * gameOdds = {
			gameId: "0x3163626162623163303138373465363263313661316462333164363164353333",
			homeOdds: "0",
			awayOdds: "0",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_1 =
			'0x31636261626231633031383734653632633136613164623331643631643533330000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_1 = [oddsResult_1];
		reqIdOdds_1 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_2 = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_2 =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc
		oddsResultArray_2 = [oddsResult_2];
		reqIdOdds_2 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_total = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "200",
			totalOverOdds: "10300",
			totalUnder: "200",
			totalUnderOdds: "-11300"
    		}
		 */
		oddsResult_total =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd50800000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd508';
		oddsResultArray_total = [oddsResult_total];
		reqIdOdds_total = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "450",
			spreadHomeOdds: "10300",
			spreadAway: "-450",
			spreadAwayOdds: "-11300",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsid_spread = '0x6536306366613738303834366166363839373862343935373965356366333936';
		oddsResult_spread =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd508fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe3e0000000000000000000000000000000000000000000000000000000000002af80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread = [oddsResult_spread];
		reqIdOdds_spread = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_spread_update = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "450",
			spreadHomeOdds: "-12000",
			spreadAway: "-450",
			spreadAwayOdds: "12000",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_spread_update =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe3e0000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread_update = [oddsResult_spread_update];
		reqIdOdds_spread_update = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_total_update = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "",
			spreadAwayOdds: "0",
			totalOver: "200",
			totalOverOdds: "-12000",
			totalUnder: "200",
			totalUnderOdds: "12000"
    		}
		 */
		oddsResult_total_update =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd12000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsResultArray_total_update = [oddsResult_total_update];
		reqIdOdds_total_update = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_spread_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "550",
			spreadHomeOdds: "11300",
			spreadAway: "-550",
			spreadAwayOdds: "-10300",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_spread_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdda0000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread_update_line = [oddsResult_spread_update_line];
		reqIdOdds_spread_update_line =
			'0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_total_update_line = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "",
			spreadAwayOdds: "0",
			totalOver: "210",
			totalOverOdds: "-12000",
			totalUnder: "210",
			totalUnderOdds: "12000"
    		}
		 */
		oddsResult_total_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd12000000000000000000000000000000000000000000000000000000000000000d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsResultArray_total_update_line = [oddsResult_total_update_line];
		reqIdOdds_total_update_line =
			'0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		// create game props for total and spread
		nba_game_create =
			'0x00000000000000000000000000000000000000000000000000000000000000206536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000005b68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000625755f000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		nba_create_array = [nba_game_create];
		dummyAddress = '0xb69e74324bc030f1b8889236efa461496d439226';

		oddsid_create_all = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "-20700",
			awayOdds: "17700",
			drawOdds: "0",
			spreadHome: "550",
			spreadHomeOdds: "-12000",
			spreadAway: "-550",
			spreadAwayOdds: "12000",
			totalOver: "2000",
			totalOverOdds: "-12000",
			totalUnder: "2000",
			totalUnderOdds: "12000"
			}
		 */
		oddsid_create_result_1 =
			'0x6536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf24000000000000000000000000000000000000000000000000000000000000452400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffddaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsid_create_result_array_1 = [oddsid_create_result_1];
		reqIdOdds_create_1 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "-20700",
			awayOdds: "17700",
			drawOdds: "0",
			spreadHome: "-550",
			spreadHomeOdds: "-12000",
			spreadAway: "-550",
			spreadAwayOdds: "12000",
			totalOver: "2000",
			totalOverOdds: "-12000",
			totalUnder: "2000",
			totalUnderOdds: "12000"
			}
		 */
		oddsid_create_result_2 =
			'0x6536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf2400000000000000000000000000000000000000000000000000000000000045240000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffddaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsid_create_result_array_2 = [oddsid_create_result_2];
		reqIdOdds_create_2 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		TherundownConsumer = artifacts.require('TherundownConsumer');
		TherundownConsumerDeployed = await TherundownConsumer.new();

		await TherundownConsumerDeployed.initialize(
			owner,
			[sportId_4, sportId_16, sportId_7],
			SportPositionalMarketManager.address,
			[sportId_4, sportId_7],
			gamesQueue.address,
			[8, 11, 12], // resolved statuses
			[1, 2], // cancel statuses
			{ from: owner }
		);
		await Thales.transfer(TherundownConsumerDeployed.address, toUnit('1000'), { from: owner });

		let ConsumerVerifier = artifacts.require('TherundownConsumerVerifier');
		verifier = await ConsumerVerifier.new({ from: owner });

		await verifier.initialize(
			owner,
			TherundownConsumerDeployed.address,
			['TDB TDB', 'TBA TBA'],
			['create', 'resolve'],
			20,
			{
				from: owner,
			}
		);

		let GamesOddsObtainer = artifacts.require('GamesOddsObtainer');
		GamesOddsObtainerDeployed = await GamesOddsObtainer.new({ from: owner });

		await GamesOddsObtainerDeployed.initialize(
			owner,
			TherundownConsumerDeployed.address,
			verifier.address,
			SportPositionalMarketManager.address,
			[4, 16],
			{ from: owner }
		);

		await TherundownConsumerDeployed.setSportContracts(
			wrapper,
			gamesQueue.address,
			SportPositionalMarketManager.address,
			verifier.address,
			GamesOddsObtainerDeployed.address,
			{ from: owner }
		);
		await TherundownConsumerDeployed.addToWhitelist(third, true, { from: owner });
		await SportPositionalMarketManager.setTherundownConsumer(TherundownConsumerDeployed.address, {
			from: manager,
		});
		await SportPositionalMarketManager.setOddsObtainer(GamesOddsObtainerDeployed.address, {
			from: manager,
		});
		await gamesQueue.setConsumerAddress(TherundownConsumerDeployed.address, { from: owner });
		await verifier.setObtainer(GamesOddsObtainerDeployed.address, { from: owner });
		await verifier.setSportsManager(SportPositionalMarketManager.address, { from: owner });
	});

	describe('Init', () => {
		it('Check init', async () => {
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));
			assert.equal(false, await TherundownConsumerDeployed.supportedSport(0));
			assert.equal(false, await TherundownConsumerDeployed.supportedSport(1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(8));

			assert.equal(true, await verifier.isSupportedMarketType('create'));
			assert.equal(true, await verifier.isSupportedMarketType('resolve'));
			assert.equal(false, await verifier.isSupportedMarketType('aaa'));

			assert.equal(true, await TherundownConsumerDeployed.supportResolveGameStatuses(8));
			assert.equal(false, await TherundownConsumerDeployed.supportResolveGameStatuses(1));

			assert.equal(false, await TherundownConsumerDeployed.cancelGameStatuses(8));
			assert.equal(true, await TherundownConsumerDeployed.cancelGameStatuses(1));
			assert.equal(true, await gamesQueue.whitelistedAddresses(third));
		});
	});

	describe('Fulfill Games Created', () => {
		it('Fulfill Games Created - NBA, create market, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(game1NBATime, await TherundownConsumerDeployed.gameOnADate(gameid1));
			assert.bnEqual(game1NBATime, await TherundownConsumerDeployed.gameOnADate(gameid2));

			let getGamesPerdatepersport = await TherundownConsumerDeployed.getGamesPerDatePerSport(
				4,
				game1NBATime
			);
			assert.bnEqual(2, getGamesPerdatepersport.length);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));
		});

		it('Fulfill Games Created - UFC, time of a game has pased, no market creation only dequeue', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			// queue clean!!!
			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(0, await gamesQueue.lastCreated());

			assert.equal(false, await TherundownConsumerDeployed.gameFulfilledCreated(fightId));

			await expect(
				TherundownConsumerDeployed.reopenGameForCreationProcessing(fightId, { from: owner })
			).to.be.revertedWith('ID22');

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			assert.equal(fightId, await gamesQueue.gamesCreateQueue(1));

			assert.equal(true, await TherundownConsumerDeployed.gameFulfilledCreated(fightId));

			// added into queue!!!
			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			// game time has passed !!!!
			await fastForward(fightTime - (await currentTime()) + 2 * HOUR);

			// this transaction will only dequeue and not create market
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);
			// no market created
			assert.equal(ZERO_ADDRESS, marketAdd);

			// dequeued
			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			await TherundownConsumerDeployed.reopenGameForCreationProcessing(fightId, { from: owner });

			assert.equal(false, await TherundownConsumerDeployed.gameFulfilledCreated(fightId));
		});

		it('Fulfill Games Created - Champions League Game 1, create market, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameFootballid1);
			assert.bnEqual(40000, result[0]);
			assert.bnEqual(-12500, result[1]);
			assert.bnEqual(27200, result[2]);

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid1);
			assert.equal('Atletico Madrid Atletico Madrid', game.homeTeam);
			assert.equal('Manchester City Manchester City', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));
		});

		it('Fulfill Games Created - Champions League Game 2, create market, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid2);
			assert.equal('Liverpool Liverpool', game.homeTeam);
			assert.equal('Benfica Benfica', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[1], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid2,
				_game: game,
			});

			// clean first in queue
			await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid2);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid2);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('1');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));
		});
	});

	describe('Fulfill Games Resolved', () => {
		it('Fulfill Games Resolved - NBA, resolve markets, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1, gameid2]);
			assert.equal(6, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(-20700, arrayOfOdds[3]);
			assert.bnEqual(17700, arrayOfOdds[4]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(129, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveAllMarketsForGames([gameid1]);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_outcome: 2,
			});
		});

		it('Fulfill Games Resolved - Champions League Game 1, resolve market, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid1);
			assert.equal('Atletico Madrid Atletico Madrid', game.homeTeam);
			assert.equal('Manchester City Manchester City', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createAllMarketsForGames([
				gameFootballid1,
			]);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid1);
			assert.equal(false, await TherundownConsumerDeployed.canMarketBeUpdated(dummyAddress));
			assert.equal(false, await TherundownConsumerDeployed.canMarketBeUpdated(marketAdd));

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			await fastForward(gameFootballTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			assert.equal(false, await TherundownConsumerDeployed.isGameInResolvedStatus(gameFootballid1));

			let verifier_output_game = await verifier.getGameProperties(gameFootballid1);

			assert.equal(marketAdd, verifier_output_game[0]);
			assert.equal(false, verifier_output_game[1]);
			assert.equal(false, verifier_output_game[2]);
			assert.equal(false, verifier_output_game[3]);
			assert.equal(false, verifier_output_game[4]);

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolveFoodball,
				gamesResolvedFootball,
				sportId_16,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameFootballid1);
			assert.bnEqual(0, gameR.homeScore);
			assert.bnEqual(1, gameR.awayScore);
			assert.bnEqual(11, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolveFoodball,
				_sportId: sportId_16,
				_id: gameFootballid1,
				_game: gameR,
			});

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveMarketForGame(gameFootballid1);

			assert.equal(true, await TherundownConsumerDeployed.isGameInResolvedStatus(gameFootballid1));

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_outcome: 2,
			});

			verifier_output_game = await verifier.getGameProperties(gameFootballid1);

			assert.equal(marketAdd, verifier_output_game[0]);
			assert.equal(true, verifier_output_game[1]);
			assert.equal(false, verifier_output_game[2]);
			assert.equal(false, verifier_output_game[3]);
			assert.equal(false, verifier_output_game[4]);

			let getAllGameProperties = await verifier.getAllGameProperties([gameFootballid1]);
			let marketaddressArray = getAllGameProperties[0];
			let marketResolvedArray = getAllGameProperties[1];
			let marketCanceledArray = getAllGameProperties[2];
			let invalidOddsArray = getAllGameProperties[3];
			let startTimeArray = getAllGameProperties[6];

			assert.equal(1, marketaddressArray.length);
			assert.equal(1, marketResolvedArray.length);
			assert.equal(1, marketCanceledArray.length);
			assert.equal(1, invalidOddsArray.length);
			assert.equal(1, startTimeArray.length);

			assert.equal(marketAdd, marketaddressArray[0]);
			assert.equal(true, marketResolvedArray[0]);
			assert.equal(false, marketCanceledArray[0]);
			assert.equal(false, invalidOddsArray[0]);
			assert.bnEqual(1649876400, startTimeArray[0]);

			let getAllPropertiesForGivenGames = await verifier.getAllPropertiesForGivenGames([
				gameFootballid1,
			]);
			let oddsMain = getAllPropertiesForGivenGames[0];
			let linesSpread = getAllPropertiesForGivenGames[1];
			let linesTotal = getAllPropertiesForGivenGames[2];
			let oddsSpreadTotals = getAllPropertiesForGivenGames[3];

			assert.equal(3, oddsMain.length);
			assert.equal(2, linesSpread.length);
			assert.equal(2, linesTotal.length);
			assert.equal(4, oddsSpreadTotals.length);

			assert.bnEqual(40000, oddsMain[0]);
			assert.bnEqual(-12500, oddsMain[1]);
			assert.bnEqual(27200, oddsMain[2]);
		});

		it('Fulfill Games Resolved - Champions League Game 2, resolve market, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid2);
			assert.equal('Liverpool Liverpool', game.homeTeam);
			assert.equal('Benfica Benfica', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[1], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid2,
				_game: game,
			});

			await expect(
				TherundownConsumerDeployed.createMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID3');

			// clean first in queue
			await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid2);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid2);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('1');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(gameFootballTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolveFoodball,
				gamesResolvedFootball,
				sportId_16,
				{ from: wrapper }
			);
			let gameR = await TherundownConsumerDeployed.gameResolved(gameFootballid2);
			assert.equal(0, gameR.homeScore);
			assert.equal(1, gameR.awayScore);
			assert.equal(11, gameR.statusId);

			assert.eventEqual(tx_2.logs[1], 'GameResolved', {
				_requestId: reqIdResolveFoodball,
				_sportId: sportId_16,
				_id: gameFootballid2,
				_game: gameR,
			});

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveMarketForGame(gameFootballid2);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_outcome: 2,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID4');
		});

		it('Fulfill Games Resolved - UFC, create market, resolve market, check results', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(fightTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightResolve,
				gamesFightResolved,
				sportId_7,
				{ from: wrapper }
			);

			let fightR = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(1, fightR.homeScore);
			assert.equal(0, fightR.awayScore);
			assert.equal(8, fightR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdFightResolve,
				_sportId: sportId_7,
				_id: fightId,
				_game: fightR,
			});

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveMarketForGame(fightId);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_outcome: 1,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID4');
		});

		it('Fulfill Games Resolved - UFC, create market, pause market, resolve -> remove from queue only', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(fightTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightResolve,
				gamesFightResolved,
				sportId_7,
				{ from: wrapper }
			);

			let fightR = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(1, fightR.homeScore);
			assert.equal(0, fightR.awayScore);
			assert.equal(8, fightR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdFightResolve,
				_sportId: sportId_7,
				_id: fightId,
				_game: fightR,
			});

			assert.equal(true, await deployedMarket.canResolve());
			assert.equal(false, await deployedMarket.paused());

			await SportPositionalMarketManager.setMarketPaused(marketAdd, true, { from: manager });

			assert.equal(true, await deployedMarket.paused());
			assert.equal(false, await deployedMarket.canResolve());

			assert.equal(1, await gamesQueue.firstResolved());
			assert.equal(1, await gamesQueue.lastResolved());

			// resolve markets but market is paused so only remove from queue
			const tx_resolve = await TherundownConsumerDeployed.resolveMarketForGame(fightId);

			assert.equal(2, await gamesQueue.firstResolved());
			assert.equal(1, await gamesQueue.lastResolved());
		});

		it('Fulfill Games Resolved - UFC DRAW, create market, resolve market, check results', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(fightTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightResolveDraw,
				gamesFightResolvedDraw,
				sportId_7,
				{ from: wrapper }
			);

			let fightR = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(0, fightR.homeScore);
			assert.equal(0, fightR.awayScore);
			assert.equal(8, fightR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdFightResolveDraw,
				_sportId: sportId_7,
				_id: fightId,
				_game: fightR,
			});

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveMarketForGame(fightId);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'CancelSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID4');
		});

		it('Fulfill Games Resolved - game time has passed, cancel market, automaticly', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			let verifier_output_sport = await verifier.getSportProperties(sportId_7, fightTime);

			assert.equal(false, verifier_output_sport[0]);
			assert.equal(true, verifier_output_sport[1]);
			assert.equal(0, verifier_output_sport[2].length);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			verifier_output_sport = await verifier.getSportProperties(sportId_7, fightTime);

			assert.equal(true, verifier_output_sport[0]);
			assert.equal(true, verifier_output_sport[1]);
			assert.equal(1, verifier_output_sport[2].length);

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			let verifier_output_game = await verifier.getGameProperties(fightId);

			assert.equal(marketAdd, verifier_output_game[0]);
			assert.equal(false, verifier_output_game[1]);
			assert.equal(false, verifier_output_game[2]);
			assert.equal(false, verifier_output_game[3]);
			assert.equal(false, verifier_output_game[4]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(fightTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightCanceled,
				gamesFightCanceled,
				sportId_7,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.gameFulfilledResolved(fightId));

			let fightC = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(0, fightC.homeScore);
			assert.equal(0, fightC.awayScore);
			assert.equal(2, fightC.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdFightCanceled,
				_sportId: sportId_7,
				_id: fightId,
				_game: fightC,
			});

			// resolve markets
			const tx_canceled = await TherundownConsumerDeployed.resolveMarketForGame(fightId);

			// check if event is emited
			assert.eventEqual(tx_canceled.logs[0], 'CancelSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID4');
		});

		it('Fulfill Games Resolved - game time has not passed, first pause, then cancel automaticly after it is passed', async () => {
			await fastForward(fightTime - (await currentTime()) - 1 * HOUR);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(false, await deployedMarket.paused());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightCanceled,
				gamesFightCanceled,
				sportId_7,
				{ from: wrapper }
			);

			// not canceled part only paused

			assert.equal(false, await TherundownConsumerDeployed.gameFulfilledResolved(fightId));

			// there is no result yet
			let fightC = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(0, fightC.homeScore);
			assert.equal(0, fightC.awayScore);
			assert.equal(0, fightC.statusId);

			assert.eventEqual(tx_2.logs[0], 'PauseSportsMarket', {
				_marketAddress: marketAdd,
				_pause: true,
			});

			assert.equal(true, await deployedMarket.paused());

			// canceling part when time has arrived

			await fastForward(fightTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.paused());
			// paused can not be resolved
			assert.equal(false, await deployedMarket.canResolve());
			// stil not canceled
			assert.equal(false, await deployedMarket.cancelled());

			const tx_3 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdFightCanceled,
				gamesFightCanceled,
				sportId_7,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.gameFulfilledResolved(fightId));

			fightC = await TherundownConsumerDeployed.gameResolved(fightId);
			assert.equal(0, fightC.homeScore);
			assert.equal(0, fightC.awayScore);
			assert.equal(2, fightC.statusId);
			assert.equal(1660082400, fightC.lastUpdated);

			assert.eventEqual(tx_3.logs[0], 'GameResolved', {
				_requestId: reqIdFightCanceled,
				_sportId: sportId_7,
				_id: fightId,
				_game: fightC,
			});

			// resolve markets
			const tx_canceled = await TherundownConsumerDeployed.resolveMarketForGame(fightId);

			// check if event is emited
			assert.eventEqual(tx_canceled.logs[0], 'CancelSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
			});

			assert.equal(false, await deployedMarket.paused());
			assert.equal(true, await deployedMarket.cancelled());

			await expect(
				TherundownConsumerDeployed.resolveMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID4');
		});

		it('Fulfill Games Resolved - NBA, resolve markets, and check children, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated_single,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1]);
			assert.equal(3, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(0, arrayOfOdds[2]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_1,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let getNormalizedChildOdds = await TherundownConsumerDeployed.getNormalizedChildOdds(
				mainMarketTotalChildMarket
			);
			assert.notEqual(0, getNormalizedChildOdds[0]);
			assert.notEqual(0, getNormalizedChildOdds[1]);

			let getNormalizedChildOddsS = await TherundownConsumerDeployed.getNormalizedChildOdds(
				mainMarketSpreadChildMarket
			);
			assert.notEqual(0, getNormalizedChildOddsS[0]);
			assert.notEqual(0, getNormalizedChildOddsS[1]);

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(129, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			let childMarket1 = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);
			let childMarket2 = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await deployedMarket.resolved());
			assert.equal(false, await childMarket1.resolved());
			assert.equal(false, await childMarket2.resolved());

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveAllMarketsForGames([gameid1]);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_outcome: 2,
			});

			assert.equal(true, await deployedMarket.resolved());
			assert.equal(true, await childMarket1.resolved());
			assert.equal(true, await childMarket2.resolved());
		});

		it('Fulfill Games Resolved - NBA, resolve markets automatic, and check children, check results', async () => {
			await TherundownConsumerDeployed.setNewMaxNumberOfMarketsToResolve(15, {
				from: owner,
			});

			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated_single,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1]);
			assert.equal(3, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(0, arrayOfOdds[2]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_1,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let getNormalizedChildOdds = await TherundownConsumerDeployed.getNormalizedChildOdds(
				mainMarketTotalChildMarket
			);
			assert.notEqual(0, getNormalizedChildOdds[0]);
			assert.notEqual(0, getNormalizedChildOdds[1]);

			let getNormalizedChildOddsS = await TherundownConsumerDeployed.getNormalizedChildOdds(
				mainMarketSpreadChildMarket
			);
			assert.notEqual(0, getNormalizedChildOddsS[0]);
			assert.notEqual(0, getNormalizedChildOddsS[1]);

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(129, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			let childMarket1 = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);
			let childMarket2 = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(true, await deployedMarket.resolved());
			assert.equal(true, await childMarket1.resolved());
			assert.equal(true, await childMarket2.resolved());

			await TherundownConsumerDeployed.setNewMaxNumberOfMarketsToResolve(0, {
				from: owner,
			});
		});

		it('Fulfill Games Resolved - NBA, resolve markets, and check children, negative spread, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated_single,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1]);
			assert.equal(3, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(0, arrayOfOdds[2]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_2,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				-550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(129, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			let childMarket1 = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);
			let childMarket2 = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await deployedMarket.resolved());
			assert.equal(false, await childMarket1.resolved());
			assert.equal(false, await childMarket2.resolved());

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveAllMarketsForGames([gameid1]);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_outcome: 2,
			});

			assert.equal(true, await deployedMarket.resolved());
			assert.equal(true, await childMarket1.resolved());
			assert.equal(true, await childMarket2.resolved());
		});

		it('Fulfill Games Resolved - NBA, resolve markets, and check children, total less, spread more, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated_single,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1]);
			assert.equal(3, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(0, arrayOfOdds[2]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_1,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childs = await GamesOddsObtainerDeployed.getAllChildMarketsFromParent(marketAdd);
			assert.bnEqual(2, childs.length);

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved_single_1,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(96, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			let childMarket1 = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);
			let childMarket2 = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await deployedMarket.resolved());
			assert.equal(false, await childMarket1.resolved());
			assert.equal(false, await childMarket2.resolved());

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveAllMarketsForGames([gameid1]);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_outcome: 1,
			});

			assert.equal(true, await deployedMarket.resolved());
			assert.equal(true, await childMarket1.resolved());
			assert.equal(true, await childMarket2.resolved());
		});

		it('Fulfill Games Resolved - NBA, resolve markets, and check children, total less, spread more, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated_single,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			let arrayOfOdds = await verifier.getOddsForGames([gameid1]);
			assert.equal(3, arrayOfOdds.length);
			assert.bnEqual(-20700, arrayOfOdds[0]);
			assert.bnEqual(17700, arrayOfOdds[1]);
			assert.bnEqual(0, arrayOfOdds[2]);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			let game_prop = await TherundownConsumerDeployed.getGamePropsForOdds(marketAdd);
			assert.equal(4, game_prop[0]);
			assert.equal(game1NBATime, game_prop[1]);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_1,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			await fastForward(await currentTime());

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolve,
				gamesResolved_single_2,
				sportId_4,
				{ from: wrapper }
			);

			let gameR = await TherundownConsumerDeployed.gameResolved(gameid1);
			assert.equal(100, gameR.homeScore);
			assert.equal(80, gameR.awayScore);
			assert.equal(8, gameR.statusId);

			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: reqIdResolve,
				_sportId: sportId_4,
				_id: gameid1,
				_game: gameR,
			});

			let childMarket1 = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);
			let childMarket2 = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await deployedMarket.resolved());
			assert.equal(false, await childMarket1.resolved());
			assert.equal(false, await childMarket2.resolved());

			// resolve markets
			const tx_resolve = await TherundownConsumerDeployed.resolveAllMarketsForGames([gameid1]);

			// check if event is emited
			assert.eventEqual(tx_resolve.logs[0], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_outcome: 1,
			});

			assert.equal(true, await deployedMarket.resolved());
			assert.equal(true, await childMarket1.resolved());
			assert.equal(true, await childMarket2.resolved());
		});
	});

	describe('Game resolve/clancel Manually', () => {
		it('Pause-unpause market manually, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			await expect(
				TherundownConsumerDeployed.pauseOrUnpauseMarketManually(dummyAddress, true, { from: third })
			).to.be.revertedWith('ID20');
			await expect(
				TherundownConsumerDeployed.pauseOrUnpauseMarketManually(ZERO_ADDRESS, true, { from: third })
			).to.be.revertedWith('ID20');

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			await expect(
				TherundownConsumerDeployed.pauseOrUnpauseMarketManually(dummyAddress, true, { from: third })
			).to.be.revertedWith('ID20');
			await expect(
				TherundownConsumerDeployed.pauseOrUnpauseMarketManually(ZERO_ADDRESS, true, { from: third })
			).to.be.revertedWith('ID20');

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			const tx_pause = await TherundownConsumerDeployed.pauseOrUnpauseMarketManually(
				marketAdd,
				true,
				{
					from: third,
				}
			);

			// check if event is emited
			assert.eventEqual(tx_pause.logs[0], 'PauseSportsMarket', {
				_marketAddress: marketAdd,
				_pause: true,
			});

			const tx_unpause = await TherundownConsumerDeployed.pauseOrUnpauseMarketManually(
				marketAdd,
				false,
				{ from: third }
			);

			// check if event is emited
			assert.eventEqual(tx_unpause.logs[0], 'PauseSportsMarket', {
				_marketAddress: marketAdd,
				_pause: false,
			});

			await fastForward(await currentTime());

			const tx_2 = await TherundownConsumerDeployed.resolveMarketManually(
				marketAdd,
				0,
				0,
				0,
				false,
				{
					from: third,
				}
			);
		});
		it('Resolve game 1 Manually, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid1);
			assert.equal('Atletico Madrid Atletico Madrid', game.homeTeam);
			assert.equal('Manchester City Manchester City', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			await fastForward(gameFootballTime - (await currentTime()) + 3 * HOUR);

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 1, false, {
					from: second,
				})
			).to.be.revertedWith('ID10');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 4, 1, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 2, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 1, 1, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 1, 1, 2, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 0, 1, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 3, 2, 1, false, { from: third })
			).to.be.revertedWith('ID15');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 3, 1, 2, false, { from: third })
			).to.be.revertedWith('ID15');

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 2, true, {
					from: third,
				})
			).to.be.revertedWith('ID17');

			const tx_2 = await TherundownConsumerDeployed.resolveMarketManually(
				marketAdd,
				2,
				1,
				2,
				false,
				{
					from: third,
				}
			);

			// check if event is emited
			assert.eventEqual(tx_2.logs[1], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_outcome: 2,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 2, false, { from: third })
			).to.be.revertedWith('ID13');
		});

		it('Resolve market address manually, check results', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid2);
			assert.equal('Liverpool Liverpool', game.homeTeam);
			assert.equal('Benfica Benfica', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[1], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid2,
				_game: game,
			});

			await expect(
				TherundownConsumerDeployed.createMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID3');

			// clean first in queue
			await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid2);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid2);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('1');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			await fastForward(gameFootballTime - (await currentTime()) + 3 * HOUR);

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 2, false, {
					from: second,
				})
			).to.be.revertedWith('ID10');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 4, 0, 0, false, { from: third })
			).to.be.revertedWith('ID15');

			const tx_2 = await TherundownConsumerDeployed.resolveMarketManually(
				marketAdd,
				1,
				2,
				1,
				false,
				{
					from: third,
				}
			);

			// check if event is emited
			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: gameFootballid2,
				_sportId: 16,
				_id: gameFootballid2,
				_queueIndex: 0,
			});

			// check if event is emited
			assert.eventEqual(tx_2.logs[1], 'ResolveSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_outcome: 1,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 2, false, { from: third })
			).to.be.revertedWith('ID13');
		});

		it('Cancel market Manually, check results', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.equal(false, await TherundownConsumerDeployed.isGameInResolvedStatus(gameid1));

			await fastForward(await currentTime());

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 3, 0, 0, false, {
					from: second,
				})
			).to.be.revertedWith('ID10');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(second, 3, 0, 0, false, { from: third })
			).to.be.revertedWith('ID14');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 3, 0, 0, false, { from: third })
			).to.be.revertedWith('ID15');

			const tx_2 = await TherundownConsumerDeployed.resolveMarketManually(
				marketAdd,
				0,
				0,
				0,
				false,
				{
					from: third,
				}
			);

			// check if event is emited
			assert.eventEqual(tx_2.logs[0], 'GameResolved', {
				_requestId: gameid1,
				_sportId: sportId_4,
				_id: gameid1,
			});

			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 2, 1, 2, false, { from: third })
			).to.be.revertedWith('ID13');
			await expect(
				TherundownConsumerDeployed.resolveMarketManually(marketAdd, 0, 0, 0, false, { from: third })
			).to.be.revertedWith('ID13');
		});
	});

	describe('Odds for game', () => {
		it('Get odds per game, check results, geme not created, no odds created', async () => {
			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesOdds(reqIdOdds, oddsResultArray, {
				from: wrapper,
			});

			// game not created so zero odds
			let result = await GamesOddsObtainerDeployed.getOddsForGame(oddsid);
			assert.bnEqual(0, result[0]);
			assert.bnEqual(0, result[0]);
			assert.bnEqual(0, result[0]);
		});

		it('Get odds per game, check results, invalid odds', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameFootballid1);
			assert.bnEqual(40000, result[0]);
			assert.bnEqual(-12500, result[1]);
			assert.bnEqual(27200, result[2]);

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid1);
			assert.equal('Atletico Madrid Atletico Madrid', game.homeTeam);
			assert.equal('Manchester City Manchester City', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid1);

			let normalizedFulfiled = await GamesOddsObtainerDeployed.normalizedOddsForMarketFulfilled(
				marketAdd
			);
			assert.equal(true, normalizedFulfiled);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			normalizedFulfiled = await GamesOddsObtainerDeployed.normalizedOddsForMarketFulfilled(
				marketAdd
			);
			assert.equal(true, normalizedFulfiled);

			let normalizedFirst = await GamesOddsObtainerDeployed.normalizedOddsForMarket(marketAdd, 0);
			assert.bnNotEqual(0, normalizedFirst);
			let normalizedSecond = await GamesOddsObtainerDeployed.normalizedOddsForMarket(marketAdd, 1);
			assert.bnNotEqual(0, normalizedSecond);
			let normalizedThird = await GamesOddsObtainerDeployed.normalizedOddsForMarket(marketAdd, 2);
			assert.bnNotEqual(0, normalizedThird);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameFootballid1);
			assert.bnEqual(40000, result_final[0]);
			assert.bnEqual(-12500, result_final[1]);
			assert.bnEqual(27200, result_final[2]);
		});

		it('Get odds per game, check results, valid odds', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);
		});

		it('Get odds per game, check results, valid odds, odds out threshold ', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.equal(false, await deployedMarket.paused());

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// market is paused odds are not in threshold
			assert.equal(true, await deployedMarket.paused());

			const tx_cancel = await TherundownConsumerDeployed.resolveMarketManually(
				marketAdd,
				0,
				0,
				0,
				true,
				{
					from: third,
				}
			);

			let resultAfterCancel = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, resultAfterCancel[0]);
			assert.bnEqual(17700, resultAfterCancel[1]);

			// check if events are emited
			// NOW IT IS IN OBTAINER, so no emiting in TherundownConsumerDeployed
			/*assert.eventEqual(tx_cancel.logs[0], 'GameOddsAdded', {
				_requestId: gameid1,
				_id: gameid1,
			});*/

			assert.eventEqual(tx_cancel.logs[0], 'PauseSportsMarket', {
				_marketAddress: marketAdd,
				_pause: false,
			});

			// check if events are emited
			assert.eventEqual(tx_cancel.logs[1], 'GameResolved', {
				_requestId: gameid1,
				_sportId: sportId_4,
				_id: gameid1,
			});

			assert.eventEqual(tx_cancel.logs[2], 'CancelSportsMarket', {
				_marketAddress: marketAdd,
			});

			assert.equal(true, await TherundownConsumerDeployed.marketCanceled(marketAdd));
			assert.equal(false, await deployedMarket.paused());
		});
		it('Get odds per game, check results, create first total', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_total = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total,
				oddsResultArray_total,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket.tags(1));
		});

		it('Get odds per game, check results, create first spread', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_spread = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsResultArray_spread,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				450
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10001, await childMarket.tags(1));
		});

		it('Get odds per game, check results, create first spread, update spread odds, no creation', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_spread = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsResultArray_spread,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				450
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			const tx_odds_spread_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update,
				oddsResultArray_spread_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
		});
		it('Get odds per game, check results, create first total, update total odds, no creation', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_total = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total,
				oddsResultArray_total,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket.tags(1));

			const tx_odds_total_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);
		});
		it('Get odds per game, check results, create first total, line move, create new', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_total = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total,
				oddsResultArray_total,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(false, await childMarket.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket.tags(1));

			const tx_odds_total_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			const tx_odds_total_update_line = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update_line,
				oddsResultArray_total_update_line,
				{
					from: wrapper,
				}
			);

			assert.equal(true, await childMarket.paused());

			mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				210
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket_new = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			assert.equal(false, await childMarket_new.canResolve());
			assert.equal(false, await childMarket_new.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket_new.tags(1));
		});
		it('Get odds per game, check results, create first spread, line move, create new', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_spread = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsResultArray_spread,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				450
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			let normalizedFulfiled = await GamesOddsObtainerDeployed.normalizedOddsForMarketFulfilled(
				mainMarketSpreadChildMarket
			);
			assert.equal(true, normalizedFulfiled);

			let normalizedFirst = await GamesOddsObtainerDeployed.normalizedOddsForMarket(
				mainMarketSpreadChildMarket,
				0
			);
			assert.bnNotEqual(0, normalizedFirst);
			let normalizedSecond = await GamesOddsObtainerDeployed.normalizedOddsForMarket(
				mainMarketSpreadChildMarket,
				1
			);
			assert.bnNotEqual(0, normalizedSecond);

			let childMarket = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(false, await childMarket.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10001, await childMarket.tags(1));

			const tx_odds_spread_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update,
				oddsResultArray_spread_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			const tx_odds_spread_update_line = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update_line,
				oddsResultArray_spread_update_line,
				{
					from: wrapper,
				}
			);
			assert.equal(true, await childMarket.paused());

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			let childMarket_new = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

			assert.equal(false, await childMarket_new.canResolve());
			assert.equal(false, await childMarket_new.paused());
			assert.equal(9004, await childMarket_new.tags(0));
			assert.bnEqual(10001, await childMarket_new.tags(1));
		});

		it('Get odds per game, check results, create first total, line move create new, unpause old, pause current', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_total = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total,
				oddsResultArray_total,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(false, await childMarket.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket.tags(1));

			const tx_odds_total_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			const tx_odds_total_update_line = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update_line,
				oddsResultArray_total_update_line,
				{
					from: wrapper,
				}
			);

			assert.equal(true, await childMarket.paused());

			mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				210
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket_new = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			assert.equal(false, await childMarket_new.canResolve());
			assert.equal(false, await childMarket_new.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket_new.tags(1));

			const tx_odds_total_update_pause = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);

			let lines = await GamesOddsObtainerDeployed.getLinesForGame(gameid1);
			assert.bnEqual(0, lines[0]);
			assert.bnEqual(0, lines[1]);
			assert.bnEqual(200, lines[2]);
			assert.bnEqual(200, lines[3]);

			let totalLinesForGames = await verifier.getTotalLinesForGames([gameid1]);
			assert.bnEqual(2, totalLinesForGames.length);
			assert.bnEqual(200, totalLinesForGames[0]);
			assert.bnEqual(200, totalLinesForGames[1]);
			let spreadTotalsOddsForGames = await verifier.getSpreadTotalsOddsForGames([gameid1]);
			assert.bnEqual(4, spreadTotalsOddsForGames.length);
			assert.bnEqual(0, spreadTotalsOddsForGames[0]);
			assert.bnEqual(0, spreadTotalsOddsForGames[1]);
			assert.bnEqual(-12000, spreadTotalsOddsForGames[2]);
			assert.bnEqual(-12000, spreadTotalsOddsForGames[3]);

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			assert.equal(true, await childMarket_new.paused());
			assert.equal(false, await childMarket.paused());
		});
		it('Get odds per game, check results, create first spread, line move create new, unpause old, pause current', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_spread = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsResultArray_spread,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				450
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			let lines = await GamesOddsObtainerDeployed.getLinesForGame(gameid1);
			assert.bnEqual(450, lines[0]);
			assert.bnEqual(-450, lines[1]);
			assert.bnEqual(0, lines[2]);
			assert.bnEqual(0, lines[3]);

			let childMarket = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(false, await childMarket.paused());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10001, await childMarket.tags(1));

			const tx_odds_spread_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update,
				oddsResultArray_spread_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			const tx_odds_spread_update_line = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update_line,
				oddsResultArray_spread_update_line,
				{
					from: wrapper,
				}
			);
			assert.equal(true, await childMarket.paused());

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			let childMarket_new = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

			assert.equal(false, await childMarket_new.canResolve());
			assert.equal(false, await childMarket_new.paused());
			assert.equal(9004, await childMarket_new.tags(0));
			assert.bnEqual(10001, await childMarket_new.tags(1));

			const tx_odds_spread_update_pause = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread_update,
				oddsResultArray_spread_update,
				{
					from: wrapper,
				}
			);

			mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				450
			);

			let spreadLinesForGames = await verifier.getSpreadLinesForGames([gameid1]);
			assert.bnEqual(2, spreadLinesForGames.length);
			assert.bnEqual(450, spreadLinesForGames[0]);
			assert.bnEqual(-450, spreadLinesForGames[1]);
			let spreadTotalsOddsForGames = await verifier.getSpreadTotalsOddsForGames([gameid1]);
			assert.bnEqual(4, spreadTotalsOddsForGames.length);
			assert.bnEqual(-12000, spreadTotalsOddsForGames[0]);
			assert.bnEqual(12000, spreadTotalsOddsForGames[1]);
			assert.bnEqual(0, spreadTotalsOddsForGames[2]);
			assert.bnEqual(0, spreadTotalsOddsForGames[3]);

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);

			assert.equal(true, await childMarket_new.paused());
			assert.equal(false, await childMarket.paused());
		});
	});

	describe('Consumer management', () => {
		it('Test owner functions', async () => {
			const tx_setNewMaxNumberOfMarketsToResolve =
				await TherundownConsumerDeployed.setNewMaxNumberOfMarketsToResolve(15, {
					from: owner,
				});

			await expect(
				TherundownConsumerDeployed.setNewMaxNumberOfMarketsToResolve(15, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			// check if event is emited
			assert.eventEqual(
				tx_setNewMaxNumberOfMarketsToResolve.logs[0],
				'NewMaxNumberOfMarketsToResolve',
				{
					_maxNumber: 15,
				}
			);

			await expect(
				TherundownConsumerDeployed.setNewMaxNumberOfMarketsToResolve(15, {
					from: owner,
				})
			).to.be.revertedWith('Transaction reverted without a reason');

			await expect(
				TherundownConsumerDeployed.setPausedByCanceledStatus(dummyAddress, true, {
					from: wrapper,
				})
			).to.be.revertedWith('ID16');

			const tx_SupportedSport = await TherundownConsumerDeployed.setSupportedSport(15, true, {
				from: owner,
			});

			await expect(
				TherundownConsumerDeployed.setSupportedSport(15, false, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			// check if event is emited
			assert.eventEqual(tx_SupportedSport.logs[0], 'SupportedSportsChanged', {
				_sportId: 15,
				_isSupported: true,
			});

			const tx_SupportedResolvedStatuses =
				await TherundownConsumerDeployed.setSupportedResolvedStatuses(15, true, {
					from: owner,
				});

			await expect(
				TherundownConsumerDeployed.setSupportedResolvedStatuses(15, false, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			await expect(
				TherundownConsumerDeployed.setSupportedResolvedStatuses(15, true, { from: owner })
			).to.be.revertedWith('Transaction reverted without a reason');

			// check if event is emited
			assert.eventEqual(tx_SupportedResolvedStatuses.logs[0], 'SupportedResolvedStatusChanged', {
				_status: 15,
				_isSupported: true,
			});

			const tx_SupportedCancelStatuses =
				await TherundownConsumerDeployed.setSupportedCancelStatuses(15, true, {
					from: owner,
				});

			await expect(
				TherundownConsumerDeployed.setSupportedCancelStatuses(15, false, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			await expect(
				TherundownConsumerDeployed.setSupportedCancelStatuses(15, true, { from: owner })
			).to.be.revertedWith('Transaction reverted without a reason');

			// check if event is emited
			assert.eventEqual(tx_SupportedCancelStatuses.logs[0], 'SupportedCancelStatusChanged', {
				_status: 15,
				_isSupported: true,
			});

			const tx_twoPositionSport = await TherundownConsumerDeployed.setTwoPositionSport(15, true, {
				from: owner,
			});

			await expect(
				TherundownConsumerDeployed.setTwoPositionSport(15, false, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			await expect(
				TherundownConsumerDeployed.setTwoPositionSport(15, true, { from: owner })
			).to.be.revertedWith('Transaction reverted without a reason');

			// check if event is emited
			assert.eventEqual(tx_twoPositionSport.logs[0], 'TwoPositionSportChanged', {
				_sportId: 15,
				_isTwoPosition: true,
			});

			const tx_SportsManager = await TherundownConsumerDeployed.setSportContracts(
				wrapper,
				wrapper,
				wrapper,
				wrapper,
				wrapper,
				{
					from: owner,
				}
			);

			await expect(
				TherundownConsumerDeployed.setSportContracts(wrapper, wrapper, wrapper, wrapper, wrapper, {
					from: wrapper,
				})
			).to.be.revertedWith('Only the contract owner may perform this action');

			// check if event is emited
			assert.eventEqual(tx_SportsManager.logs[0], 'NewSportContracts', {
				_wrapperAddress: wrapper,
				_queues: wrapper,
				_sportsManager: wrapper,
				_verifier: wrapper,
				_oddsObtainer: wrapper,
			});
		});
	});

	describe('Odds obtainer management', () => {
		it('Test owner functions', async () => {
			const tx_setContracts = await GamesOddsObtainerDeployed.setContracts(
				first,
				second,
				third,
				fourth,
				{
					from: owner,
				}
			);

			await expect(
				GamesOddsObtainerDeployed.setContracts(first, second, third, fourth, { from: wrapper })
			).to.be.revertedWith('Only the contract owner may perform this action');

			// check if event is emited
			assert.eventEqual(tx_setContracts.logs[0], 'NewContractAddresses', {
				_consumer: first,
				_verifier: second,
				_sportsManager: third,
				_receiver: fourth,
			});

			const tx_setSupportedSportForTotalAndSpread =
				await GamesOddsObtainerDeployed.setSupportedSportForTotalAndSpread(5, true, {
					from: owner,
				});

			await expect(
				GamesOddsObtainerDeployed.setSupportedSportForTotalAndSpread(6, true, {
					from: wrapper,
				})
			).to.be.revertedWith('Only the contract owner may perform this action');

			// check if event is emited
			assert.eventEqual(
				tx_setSupportedSportForTotalAndSpread.logs[0],
				'SupportedSportForTotalAndSpreadAdded',
				{
					_sportId: 5,
					_isSupported: true,
				}
			);
		});

		it('Get odds per game, check results, create first total, remove total, total is same', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding total markets via odds

			assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

			const tx_odds_total = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total,
				oddsResultArray_total,
				{
					from: wrapper,
				}
			);
			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				200
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			let childMarket = await SportPositionalMarketContract.at(mainMarketTotalChildMarket);

			assert.equal(false, await childMarket.canResolve());
			assert.equal(9004, await childMarket.tags(0));
			assert.bnEqual(10002, await childMarket.tags(1));

			const tx_odds_total_update = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			assert.equal(false, await childMarket.paused());

			// invalid odds zero as draw
			const tx_odds_removeline = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_2,
				oddsResultArray_2,
				{
					from: wrapper,
				}
			);

			assert.equal(true, await childMarket.paused());

			const tx_odds_total_update_back = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_total_update,
				oddsResultArray_total_update,
				{
					from: wrapper,
				}
			);

			assert.equal(false, await childMarket.paused());
		});
	});

	it('Get odds per game, check results, create first spread, remove spread, spread is same unpause', async () => {
		await fastForward(game1NBATime - (await currentTime()) - SECOND);

		assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
		assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

		// req. games
		const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
			reqIdCreate,
			gamesCreated,
			sportId_4,
			game1NBATime,
			{ from: wrapper }
		);

		assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
		assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

		assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
		assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
		assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
		assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
		assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
		assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

		assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
		assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

		let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
		assert.bnEqual(-20700, result[0]);
		assert.bnEqual(17700, result[1]);

		let game = await TherundownConsumerDeployed.gameCreated(gameid1);
		let gameTime = game.startTime;
		assert.equal('Atlanta Hawks', game.homeTeam);
		assert.equal('Charlotte Hornets', game.awayTeam);

		// check if event is emited
		assert.eventEqual(tx.logs[0], 'GameCreated', {
			_requestId: reqIdCreate,
			_sportId: sportId_4,
			_id: gameid1,
			_game: game,
		});

		// create markets
		const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

		let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

		// check if event is emited
		assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
			_marketAddress: marketAdd,
			_id: gameid1,
			_game: game,
		});

		let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
		deployedMarket = await SportPositionalMarketContract.at(answer);

		assert.equal(false, await deployedMarket.canResolve());
		assert.equal(9004, await deployedMarket.tags(0));

		// invalid odds zero as draw
		const tx_odds = await TherundownConsumerDeployed.fulfillGamesOdds(
			reqIdOdds_2,
			oddsResultArray_2,
			{
				from: wrapper,
			}
		);

		let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
		assert.bnEqual(10300, result_final[0]);
		assert.bnEqual(-11300, result_final[1]);
		assert.bnEqual(0, result_final[2]);

		// adding total markets via odds

		assert.bnEqual(0, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));

		const tx_odds_spread = await TherundownConsumerDeployed.fulfillGamesOdds(
			reqIdOdds_spread,
			oddsResultArray_spread,
			{
				from: wrapper,
			}
		);
		assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
		let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
			marketAdd,
			450
		);
		assert.bnEqual(
			mainMarketSpreadChildMarket,
			await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
		);

		let childMarket = await SportPositionalMarketContract.at(mainMarketSpreadChildMarket);

		const tx_odds_spread_update = await TherundownConsumerDeployed.fulfillGamesOdds(
			reqIdOdds_spread_update,
			oddsResultArray_spread_update,
			{
				from: wrapper,
			}
		);

		assert.bnEqual(1, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
		assert.bnEqual(
			mainMarketSpreadChildMarket,
			await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
		);

		assert.equal(false, await childMarket.paused());

		// invalid odds zero as draw
		const tx_odds_update_spread_remove = await TherundownConsumerDeployed.fulfillGamesOdds(
			reqIdOdds_2,
			oddsResultArray_2,
			{
				from: wrapper,
			}
		);
		assert.equal(true, await childMarket.paused());

		await TherundownConsumerDeployed.fulfillGamesOdds(
			reqIdOdds_spread_update,
			oddsResultArray_spread_update,
			{
				from: wrapper,
			}
		);
		assert.equal(false, await childMarket.paused());
	});

	describe('Changing data on market', () => {
		it('Test changing data on UFC, market canceled, created new', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreate,
				fightCreated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Clayton Carpenter', fight.homeTeam);
			assert.equal('Edgar Chairez', fight.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight,
			});

			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
				_game: fight,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');

			// update values on fighter name

			// req games
			const tx_update = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightUpdate,
				fightUpdated,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			let fight_updated = await TherundownConsumerDeployed.gameCreated(fightId);
			assert.equal('Atlanta Hawks', fight_updated.homeTeam);
			assert.equal('Charlotte Hornets', fight_updated.awayTeam);

			// old market canceled
			assert.equal(true, await await TherundownConsumerDeployed.marketCanceled(marketAdd));

			// check if events are emited
			assert.eventEqual(tx_update.logs[0], 'CancelSportsMarket', {
				_marketAddress: marketAdd,
				_id: fightId,
			});
			assert.eventEqual(tx_update.logs[1], 'GameCreated', {
				_requestId: reqIdFightUpdate,
				_sportId: sportId_7,
				_id: fightId,
				_game: fight_updated,
			});

			const tx_create_updated_fight = await TherundownConsumerDeployed.createMarketForGame(fightId);

			let marketAddNew = await TherundownConsumerDeployed.marketPerGameId(fightId);

			// check if event is emited
			assert.eventEqual(tx_create_updated_fight.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAddNew,
				_id: fightId,
				_game: fight_updated,
			});

			let answerNew = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answerNew);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9007, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(fightId, { from: owner })
			).to.be.revertedWith('ID1');
		});

		it('Test changing date of a game, pause market, because game date less then current time', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			let getGamesPerdatepersport = await TherundownConsumerDeployed.getGamesPerDatePerSport(
				4,
				game1NBATime
			);
			assert.bnEqual(2, getGamesPerdatepersport.length);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			assert.equal(false, await deployedMarket.paused());

			// Market is paused because date pased

			await fastForward(gameTime - (await currentTime()) - SECOND);

			// req. games
			const tx_update = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqId1UpdateBefore,
				game1UpdatedBefore,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(true, await deployedMarket.paused());
		});

		it('Test changing date of a game, update market maturity date', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			let getGamesPerdatepersport = await TherundownConsumerDeployed.getGamesPerDatePerSport(
				4,
				game1NBATime
			);
			assert.bnEqual(2, getGamesPerdatepersport.length);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			assert.bnEqual(gameTime, await gamesQueue.gameStartPerGameId(gameid1));

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			let maturity;
			maturity = await deployedMarket.times();

			var maturityBefore = maturity[0];
			var expiryBefore = maturity[1];

			assert.equal(maturityBefore.toString(), gameTime.toString());

			assert.equal(false, await deployedMarket.paused());

			// Market is updated
			await fastForward(gameTime - (await currentTime()) - SECOND);

			// req. games
			const tx_update = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqId1UpdateAfter,
				game1UpdatedAfter,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			// market not paused
			assert.equal(false, await deployedMarket.paused());

			assert.bnNotEqual(gameTime, await gamesQueue.gameStartPerGameId(gameid1));

			maturity = await deployedMarket.times();
			var maturityAfter = maturity[0];
			var expiryAfter = maturity[1];

			assert.bnNotEqual(maturityBefore, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(maturityAfter, await gamesQueue.gameStartPerGameId(gameid1));

			// updated values
			console.log('Maturity before' + parseInt(maturityBefore));
			console.log('Maturity after' + parseInt(maturityAfter));
			assert.isAbove(parseInt(maturityAfter), parseInt(maturityBefore));
			console.log('Expiry before' + parseInt(expiryBefore));
			console.log('Expiry after' + parseInt(expiryAfter));
			assert.isAbove(parseInt(expiryAfter), parseInt(expiryBefore));
		});

		it('Fulfill Games Created - UFC, update date, if time to game is in future', async () => {
			await fastForward(fightTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreateTime,
				fightCreatedTime,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			assert.equal(fightIdTime, await gamesQueue.gamesCreateQueue(1));

			// added into queue!!!
			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(1, await gamesQueue.lastCreated());

			let fight = await TherundownConsumerDeployed.gameCreated(fightIdTime);
			assert.equal('Arnold Allen', fight.homeTeam);
			assert.equal('Calvin Kattar', fight.awayTeam);
			assert.bnEqual(1667073600, fight.startTime); // first date

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdFightCreateTime,
				_sportId: sportId_7,
				_id: fightIdTime,
				_game: fight,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(fightIdTime);

			// req games updated
			const tx_update = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFightCreateTimeUpdate,
				fightCreatedTimeUpdate,
				sportId_7,
				fightTime,
				{ from: wrapper }
			);

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_7));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_7));

			let fight_updated = await TherundownConsumerDeployed.gameCreated(fightIdTime);
			assert.equal('Arnold Allen', fight_updated.homeTeam);
			assert.equal('Calvin Kattar', fight_updated.awayTeam);
			assert.bnEqual(1667084400, fight_updated.startTime); // new date
		});
	});

	describe('Game management', () => {
		it('Test created queue', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			await expect(gamesQueue.addToWhitelist(second, true, { from: third })).to.be.revertedWith(
				'Only the contract owner may perform this action'
			);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));
			assert.equal(1, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			await expect(gamesQueue.dequeueGamesCreated({ from: second })).to.be.revertedWith(
				'Only consumer or whitelisted address'
			);

			const tx_remove = await gamesQueue.dequeueGamesCreated({ from: third });

			assert.equal(2, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());

			const tx_remove_2 = await gamesQueue.dequeueGamesCreated({ from: third });

			assert.equal(3, await gamesQueue.firstCreated());
			assert.equal(2, await gamesQueue.lastCreated());
		});

		it('Unprocessed games', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));
		});

		it('Test resolved queue', async () => {
			await fastForward(gameFootballTime - (await currentTime()) - SECOND);

			// req games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdFootballCreate,
				gamesFootballCreated,
				sportId_16,
				gameFootballTime,
				{ from: wrapper }
			);

			assert.equal(false, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_16));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_16));

			let game = await TherundownConsumerDeployed.gameCreated(gameFootballid2);
			assert.equal('Liverpool Liverpool', game.homeTeam);
			assert.equal('Benfica Benfica', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[1], 'GameCreated', {
				_requestId: reqIdFootballCreate,
				_sportId: sportId_16,
				_id: gameFootballid2,
				_game: game,
			});

			await expect(
				TherundownConsumerDeployed.createMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID3');

			// clean first in queue
			await TherundownConsumerDeployed.createMarketForGame(gameFootballid1);

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameFootballid2);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameFootballid2);

			// check if event is emited
			assert.eventEqual(tx_create.logs[tx_create.logs.length - 1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameFootballid2,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('1');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9016, await deployedMarket.tags(0));

			await expect(
				TherundownConsumerDeployed.createMarketForGame(gameFootballid2, { from: owner })
			).to.be.revertedWith('ID1');

			await fastForward(gameFootballTime - (await currentTime()) + 3 * HOUR);

			assert.equal(true, await deployedMarket.canResolve());

			const tx_2 = await TherundownConsumerDeployed.fulfillGamesResolved(
				reqIdResolveFoodball,
				gamesResolvedFootball,
				sportId_16,
				{ from: wrapper }
			);

			assert.equal(gameFootballid1, await gamesQueue.gamesResolvedQueue(1));
			assert.equal(gameFootballid2, await gamesQueue.gamesResolvedQueue(2));
			assert.equal(1, await gamesQueue.firstResolved());
			assert.equal(2, await gamesQueue.lastResolved());

			await expect(gamesQueue.dequeueGamesResolved({ from: second })).to.be.revertedWith(
				'Only consumer or whitelisted address'
			);

			const tx_remove = await gamesQueue.dequeueGamesResolved({ from: third });

			assert.equal(2, await gamesQueue.firstResolved());
			assert.equal(2, await gamesQueue.lastResolved());

			const tx_remove_2 = await gamesQueue.dequeueGamesResolved({ from: third });

			assert.equal(3, await gamesQueue.firstResolved());
			assert.equal(2, await gamesQueue.lastResolved());
		});
	});
});
