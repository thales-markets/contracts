'use strict';

const { artifacts, contract, web3 } = require('hardhat');
const { toBN } = web3.utils;

const { assert, addSnapshotBeforeRestoreAfterEach } = require('../../utils/common');

const { toBytes32 } = require('../../../index');

var ethers2 = require('ethers');
var crypto = require('crypto');

const SECOND = 1000;
const HOUR = 3600;
const DAY = 86400;
const WEEK = 604800;

const YEAR = 31556926;
const ZERO_ADDRESS = '0x' + '0'.repeat(40);

const {
	fastForward,
	toUnit,
	currentTime,
	bytesToString,
	multiplyDecimalRound,
	divideDecimalRound,
} = require('../../utils')();

const {
	onlyGivenAddressCanInvoke,
	convertToDecimals,
	encodeCall,
	assertRevert,
} = require('../../utils/helpers');

contract('PlayerProps', (accounts) => {
	const [
		manager,
		first,
		owner,
		second,
		third,
		fourth,
		safeBox,
		wrapper,
		firstLiquidityProvider,
		defaultLiquidityProvider,
		firstParlayAMMLiquidityProvider,
		defaultParlayAMMLiquidityProvider,
	] = accounts;

	const ZERO_ADDRESS = '0x' + '0'.repeat(40);
	const MAX_NUMBER =
		'115792089237316195423570985008687907853269984665640564039457584007913129639935';

	const SportPositionContract = artifacts.require('SportPosition');
	const SportPositionalMarketContract = artifacts.require('SportPositionalMarket');
	const SportPositionalMarketDataContract = artifacts.require('SportPositionalMarketData');
	const SportPositionalMarketManagerContract = artifacts.require('SportPositionalMarketManager');
	const SportPositionalMarketFactoryContract = artifacts.require('SportPositionalMarketFactory');
	const SportsAMMContract = artifacts.require('SportsAMM');
	const ThalesContract = artifacts.require('contracts/Token/OpThales_L1.sol:OpThales');

	const SportPositionMasterCopyContract = artifacts.require('SportPositionMastercopy');
	const StakingThalesContract = artifacts.require('StakingThales');
	const SNXRewardsContract = artifacts.require('SNXRewards');
	const AddressResolverContract = artifacts.require('AddressResolverHelper');
	const TestOddsContract = artifacts.require('TestOdds');
	const ReferralsContract = artifacts.require('Referrals');
	const ParlayAMMContract = artifacts.require('ParlayMarketsAMM');
	const ParlayMarketContract = artifacts.require('ParlayMarketMastercopy');
	const ParlayMarketDataContract = artifacts.require('ParlayMarketData');
	const ParlayVerifierContract = artifacts.require('ParlayVerifier');
	const SportsAMMUtils = artifacts.require('SportsAMMUtils');

	const SportAMMLiquidityPoolRoundMastercopy = artifacts.require(
		'SportAMMLiquidityPoolRoundMastercopy'
	);

	let ParlayAMM;
	let ParlayMarket;
	let ParlayMarketData;
	let Thales;
	let answer;
	let minimumPositioningDuration = 0;
	let minimumMarketMaturityDuration = 0;

	let marketQuestion,
		marketSource,
		endOfPositioning,
		fixedTicketPrice,
		positionAmount1,
		positionAmount2,
		positionAmount3,
		withdrawalAllowed,
		tag,
		paymentToken,
		phrases = [],
		deployedMarket,
		outcomePosition,
		outcomePosition2;

	let consumer;
	let verifier;
	let TherundownConsumerVerifier;
	let TherundownConsumerVerifierDeployed;
	let TherundownConsumer;
	let TherundownConsumerImplementation;
	let TherundownConsumerDeployed;
	let MockTherundownConsumerWrapper;
	let initializeConsumerData;
	let GamesOddsObtainerDeployed;
	let GamesOddsReceiverDeployed;
	let gamesQueue;
	let game_1_create;
	let game_1_update_after;
	let game_1_update_before;
	let game_1_resolve;
	let fightId;
	let fightIdTime;
	let fight_create;
	let fight_create_time;
	let fight_create_time_update;
	let fightCreatedTime;
	let fightCreatedTimeUpdate;
	let fightCreated;
	let fight_update;
	let fightUpdated;
	let game_fight_resolve;
	let gamesFightResolved;
	let game_fight_resolve_draw;
	let gamesFightResolvedDraw;
	let reqIdFightCreate;
	let reqIdFightCreateTime;
	let reqIdFightCreateTimeUpdate;
	let reqIdFightUpdate;
	let reqIdFightResolve;
	let reqIdFightResolveDraw;
	let gameid1;
	let oddsid;
	let oddsResult;
	let oddsid_1;
	let oddsResult_1;
	let oddsResultArray_1;
	let reqIdOdds_1;
	let oddsid_2;
	let oddsResult_2;
	let oddsResultArray_2;
	let reqIdOdds_2;
	let oddsid_total;
	let oddsResult_total;
	let oddsResultArray_total;
	let reqIdOdds_total;
	let oddsid_total_update;
	let oddsResult_total_update;
	let oddsResultArray_total_update;
	let reqIdOdds_total_update;
	let oddsid_total_update_line;
	let oddsResult_total_update_line;
	let oddsResultArray_total_update_line;
	let reqIdOdds_total_update_line;
	let oddsid_spread;
	let oddsResult_spread;
	let oddsResultArray_spread;
	let reqIdOdds_spread;
	let oddsid_spread_update;
	let oddsResult_spread_update;
	let oddsResultArray_spread_update;
	let reqIdOdds_spread_update;
	let oddsid_spread_update_line;
	let oddsResult_spread_update_line;
	let oddsResultArray_spread_update_line;
	let reqIdOdds_spread_update_line;
	let oddsResultArray;
	let reqIdOdds;
	let gameid2;
	let game_2_create;
	let game_2_resolve;
	let gamesCreated;
	let game1UpdatedAfter;
	let game1UpdatedBefore;
	let gamesResolved;
	let reqIdCreate;
	let reqId1UpdateAfter;
	let reqId1UpdateBefore;
	let reqIdResolve;
	let reqIdFootballCreate;
	let gameFootballid1;
	let gameFootballid2;
	let game_1_football_create;
	let game_2_football_create;
	let gamesFootballCreated;
	let game_1_football_resolve;
	let game_2_football_resolve;
	let reqIdResolveFoodball;
	let gamesResolvedFootball;
	let dummyAddress;
	let game_fight_canceled;
	let gamesFightCanceled;
	let reqIdFightCanceled;
	let nba_create_array,
		gamesCreated_single,
		nba_game_create,
		oddsid_create_all,
		oddsid_create_result_1,
		oddsid_create_result_array_1,
		reqIdOdds_create_1,
		oddsid_create_result_2,
		oddsid_create_result_array_2,
		reqIdOdds_create_2,
		game_1_resolve_spread_total_1,
		gamesResolved_single_1,
		gamesResolved_single_2,
		game_1_resolve_spread_total_2,
		playerPropsViaCLNode;

	let SportPositionalMarketManager,
		SportPositionalMarketFactory,
		SportPositionalMarketData,
		SportPositionalMarket,
		SportPositionalMarketMastercopy,
		SportPositionMastercopy,
		ParlayMarketMastercopy,
		StakingThales,
		SNXRewards,
		AddressResolver,
		TestOdds,
		curveSUSD,
		testUSDC,
		testUSDT,
		testDAI,
		Referrals,
		ParlayVerifier,
		SportsAMM,
		SportAMMLiquidityPool,
		ParlayAMMLiquidityPool,
		ParlayPolicy;

	let GamesPlayerPropsReceiverDeployed, GamesPlayerPropsDeployed;

	const game1NBATime = 1646958600;
	const gameFootballTime = 1649876400;
	const fightTime = 1660089600;

	const sportId_4 = 4; // NBA
	const sportId_16 = 16; // CHL
	const sportId_7 = 7; // UFC

	const tagID_4 = 9000 + sportId_4;
	let gameMarket;

	let parlayAMMfee = toUnit('0.05');
	let safeBoxImpact = toUnit('0.02');
	let minUSDAmount = '10';
	let maxSupportedAmount = '20000';
	let maxSupportedOdd = '0.05';

	const usdcQuantity = toBN(10000 * 1e6); //100 USDC
	let parlayMarkets = [];
	let parlayMarkets2 = [];
	let parlayMarkets3 = [];
	let parlayMarkets4 = [];
	let parlayMarkets5 = [];

	let equalParlayMarkets = [];
	let parlayPositions = [];
	let parlaySingleMarketAddress;
	let parlaySingleMarket;
	let voucher, SportAMMRiskManager;
	let emptyArray = [];

	let sportsAMMUtils;

	beforeEach(async () => {
		SportPositionalMarketManager = await SportPositionalMarketManagerContract.new({
			from: manager,
		});
		SportPositionalMarketFactory = await SportPositionalMarketFactoryContract.new({
			from: manager,
		});
		SportPositionalMarketMastercopy = await SportPositionalMarketContract.new({ from: manager });
		SportPositionMastercopy = await SportPositionContract.new({ from: manager });
		SportPositionalMarketData = await SportPositionalMarketDataContract.new({ from: manager });
		SportsAMM = await SportsAMMContract.new({ from: manager });
		Thales = await ThalesContract.new({ from: owner });

		await SportsAMM.initialize(owner, Thales.address, toUnit('0.02'), toUnit('0.2'), DAY, {
			from: owner,
		});

		await SportsAMM.setParameters(
			DAY,
			toUnit('0.04'), //_minSpread
			toUnit('0.2'),
			toUnit('0.001'),
			toUnit('0.9'),
			toUnit('0.01'),
			toUnit('0.005'),
			toUnit('5000'),
			{ from: owner }
		);

		sportsAMMUtils = await SportsAMMUtils.new(SportsAMM.address);
		await SportsAMM.setAmmUtils(sportsAMMUtils.address, {
			from: owner,
		});
		await SportsAMM.setSportsPositionalMarketManager(SportPositionalMarketManager.address, {
			from: owner,
		});

		Referrals = await ReferralsContract.new();
		await Referrals.initialize(owner, ZERO_ADDRESS, ZERO_ADDRESS, { from: owner });

		let GamesQueue = artifacts.require('GamesQueue');
		gamesQueue = await GamesQueue.new({ from: owner });
		await gamesQueue.initialize(owner, { from: owner });

		await gamesQueue.addToWhitelist(third, true, {
			from: owner,
		});

		await SportPositionalMarketManager.initialize(manager, Thales.address, { from: manager });
		await SportPositionalMarketFactory.initialize(manager, { from: manager });

		await SportPositionalMarketFactory.setSportPositionalMarketManager(
			SportPositionalMarketManager.address,
			{ from: manager }
		);
		await SportPositionalMarketFactory.setSportPositionalMarketMastercopy(
			SportPositionalMarketMastercopy.address,
			{ from: manager }
		);
		await SportPositionalMarketFactory.setSportPositionMastercopy(SportPositionMastercopy.address, {
			from: manager,
		});
		// await SportPositionalMarketFactory.setLimitOrderProvider(SportsAMM.address, { from: manager });
		await SportPositionalMarketFactory.setSportsAMM(SportsAMM.address, { from: manager });
		await SportPositionalMarketManager.setSportPositionalMarketFactory(
			SportPositionalMarketFactory.address,
			{ from: manager }
		);

		await SportPositionalMarketManager.setIsDoubleChanceSupported(true, { from: manager });

		await Thales.transfer(first, toUnit('1000'), { from: owner });
		await Thales.transfer(second, toUnit('1000'), { from: owner });
		await Thales.transfer(third, toUnit('1000'), { from: owner });

		// ids
		gameid1 = '0x6536306366613738303834366166363839373862343935373965356366333936';
		gameid2 = '0x3937346533663036386233333764313239656435633133646632376133326662';
		fightId = '0x3234376564326334663865313462396538343833353636353361373863393962';
		fightIdTime = '0x3837656631326534343130616538653331313830613663613464613961626363';

		// create game props
		game_1_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_2_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		gamesCreated = [game_1_create, game_2_create];
		reqIdCreate = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21666';

		// create fight props
		fight_create =
			'0x000000000000000000000000000000000000000000000000000000000000002032343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000062f2f500ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f100000000000000000000000000000000000000000000000000000000000007c9c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000011436c6179746f6e2043617270656e746572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4564676172204368616972657a00000000000000000000000000000000000000';
		fightCreated = [fight_create];
		reqIdFightCreate = '0x1e4ef9996d321a4445068689e63fe393a5860cc98a0df22da1ac877d8cfd37d3';

		fight_create_time =
			'0x0000000000000000000000000000000000000000000000000000000000000020383765663132653434313061653865333131383061366361346461396162636300000000000000000000000000000000000000000000000000000000635d8640ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000c41726e6f6c6420416c6c656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d43616c76696e204b617474617200000000000000000000000000000000000000';
		fightCreatedTime = [fight_create_time];
		reqIdFightCreateTime = '0x96855b411bc67057713b65061aaf3e24505a86ffe51fa0ac28e4b8dd3f2c4f4a';

		fight_create_time_update =
			'0x0000000000000000000000000000000000000000000000000000000000000020383765663132653434313061653865333131383061366361346461396162636300000000000000000000000000000000000000000000000000000000635db070ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd634000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000c41726e6f6c6420416c6c656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d43616c76696e204b617474617200000000000000000000000000000000000000';
		fightCreatedTimeUpdate = [fight_create_time_update];
		reqIdFightCreateTimeUpdate =
			'0x96855b411bc67057713b65061aaf3e24505a86ffe51fa0ac28e4b8dd3f2c4f4b';

		// update fight props
		fight_update =
			'0x0000000000000000000000000000000000000000000000000000000000000020323437656432633466386531346239653834383335363635336137386339396200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		fightUpdated = [fight_update];
		reqIdFightUpdate = '0x1e4ef9996d321a4445068689e63fe393a5860cc98a0df22da1ac877d8cfd37d7';

		// resolve game props
		reqIdFightResolve = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_resolve =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000062f2f500';
		gamesFightResolved = [game_fight_resolve];

		reqIdFightCanceled = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_canceled =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062f2d8e0';
		gamesFightCanceled = [game_fight_canceled];

		reqIdFightResolveDraw = '0x6b5d983afa1e2da68d49e1e1e5d963cb7d93e971329e4dac36a9697234584c68';
		game_fight_resolve_draw =
			'0x32343765643263346638653134623965383438333536363533613738633939620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000062f2f500';
		gamesFightResolvedDraw = [game_fight_resolve_draw];

		// create game props
		game_1_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_2_create =
			'0x0000000000000000000000000000000000000000000000000000000000000020393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000625755f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		gamesCreated = [game_1_create, game_2_create];
		gamesCreated_single = [game_1_create];
		reqIdCreate = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21666';

		// update game props
		game_1_update_after =
			'0x000000000000000000000000000000000000000000000000000000000000002065363063666137383038343661663638393738623439353739653563663339360000000000000000000000000000000000000000000000000000000062577210ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game_1_update_before =
			'0x0000000000000000000000000000000000000000000000000000000000000020653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000625739D0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000004524000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		game1UpdatedAfter = [game_1_update_after];
		reqId1UpdateAfter = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21667';

		game1UpdatedBefore = [game_1_update_before];
		reqId1UpdateBefore = '0x65da2443ccd66b09d4e2693933e8fb9aab9addf46fb93300bd7c1d70c5e21668';

		// resolve game props
		reqIdResolve = '0x30250573c4b099aeaf06273ef9fbdfe32ab2d6b8e33420de988be5d6886c92a7';
		game_1_resolve =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000081000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';
		game_2_resolve =
			'0x393734653366303638623333376431323965643563313364663237613332666200000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000071000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';
		gamesResolved = [game_1_resolve, game_2_resolve];

		game_1_resolve_spread_total_1 =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';

		gamesResolved_single_1 = [game_1_resolve_spread_total_1];

		game_1_resolve_spread_total_2 =
			'0x653630636661373830383436616636383937386234393537396535636633393600000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000622a9808';

		gamesResolved_single_2 = [game_1_resolve_spread_total_2];

		// football matches
		reqIdFootballCreate = '0x61d7dd698383c58c7217cf366764a1e92a1f059b1b6ea799dce4030a942302f4';
		gameFootballid1 = '0x3163626162623163303138373465363263313661316462333164363164353333';
		gameFootballid2 = '0x3662646437313731316337393837643336643465333538643937393237356234';
		game_1_football_create =
			'0x000000000000000000000000000000000000000000000000000000000000002031636261626231633031383734653632633136613164623331643631643533330000000000000000000000000000000000000000000000000000000062571db00000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a4000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001f41746c657469636f204d61647269642041746c657469636f204d616472696400000000000000000000000000000000000000000000000000000000000000001f4d616e636865737465722043697479204d616e63686573746572204369747900';
		game_2_football_create =
			'0x000000000000000000000000000000000000000000000000000000000000002036626464373137313163373938376433366434653335386439373932373562340000000000000000000000000000000000000000000000000000000062571db0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff76800000000000000000000000000000000000000000000000000000000000018c18000000000000000000000000000000000000000000000000000000000000cb2000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000134c69766572706f6f6c204c69766572706f6f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42656e666963612042656e666963610000000000000000000000000000000000';
		gamesFootballCreated = [game_1_football_create, game_2_football_create];
		game_1_football_resolve =
			'0x316362616262316330313837346536326331366131646233316436316435333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000062571db0';
		game_2_football_resolve =
			'0x366264643731373131633739383764333664346533353864393739323735623400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000062571db0';
		reqIdResolveFoodball = '0xff8887a8535b7a8030962e6f6b1eba61c0f1cb82f706e77d834f15c781e47697';
		gamesResolvedFootball = [game_1_football_resolve, game_2_football_resolve];

		oddsid = '0x6135363061373861363135353239363137366237393232353866616336613532';
		/**
		 * gameOdds = {
			gameId: "0x6135363061373861363135353239363137366237393232353866616336613532",
			homeOdds: "0",
			awayOdds: "0",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult =
			'0x61353630613738613631353532393631373662373932323538666163366135320000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a
		oddsResultArray = [oddsResult];
		reqIdOdds = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_1 = '0x3163626162623163303138373465363263313661316462333164363164353333';
		/**
		 * gameOdds = {
			gameId: "0x3163626162623163303138373465363263313661316462333164363164353333",
			homeOdds: "0",
			awayOdds: "0",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_1 =
			'0x31636261626231633031383734653632633136613164623331643631643533330000000000000000000000000000000000000000000000000000000000009c40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c0000000000000000000000000000000000000000000000000000000000006a
		oddsResultArray_1 = [oddsResult_1];
		reqIdOdds_1 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_2 = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_2 =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc
		oddsResultArray_2 = [oddsResult_2];
		reqIdOdds_2 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36de';

		oddsid_total = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "0",
			spreadAwayOdds: "0",
			totalOver: "200",
			totalOverOdds: "10300",
			totalUnder: "200",
			totalUnderOdds: "-11300"
    		}
		 */
		oddsResult_total =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd50800000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd508';
		oddsResultArray_total = [oddsResult_total];
		reqIdOdds_total = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "450",
			spreadHomeOdds: "10300",
			spreadAway: "-450",
			spreadAwayOdds: "-11300",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsid_spread = '0x6536306366613738303834366166363839373862343935373965356366333936';
		oddsResult_spread =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd508fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe3e0000000000000000000000000000000000000000000000000000000000002af80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread = [oddsResult_spread];
		reqIdOdds_spread = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_spread_update = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "450",
			spreadHomeOdds: "-12000",
			spreadAway: "-450",
			spreadAwayOdds: "12000",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_spread_update =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe3e0000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread_update = [oddsResult_spread_update];
		reqIdOdds_spread_update = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_total_update = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "",
			spreadAwayOdds: "0",
			totalOver: "200",
			totalOverOdds: "-12000",
			totalUnder: "200",
			totalUnderOdds: "12000"
    		}
		 */
		oddsResult_total_update =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd12000000000000000000000000000000000000000000000000000000000000000c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsResultArray_total_update = [oddsResult_total_update];
		reqIdOdds_total_update = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_spread_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "550",
			spreadHomeOdds: "11300",
			spreadAway: "-550",
			spreadAwayOdds: "-10300",
			totalOver: "0",
			totalOverOdds: "0",
			totalUnder: "0",
			totalUnderOdds: "0"
    		}
		 */
		oddsResult_spread_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdda0000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
		oddsResultArray_spread_update_line = [oddsResult_spread_update_line];
		reqIdOdds_spread_update_line =
			'0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		oddsid_total_update_line = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "10300",
			awayOdds: "-11300",
			drawOdds: "0",
			spreadHome: "0",
			spreadHomeOdds: "0",
			spreadAway: "",
			spreadAwayOdds: "0",
			totalOver: "210",
			totalOverOdds: "-12000",
			totalUnder: "210",
			totalUnderOdds: "12000"
    		}
		 */
		oddsResult_total_update_line =
			'0x6536306366613738303834366166363839373862343935373965356366333936000000000000000000000000000000000000000000000000000000000000283cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3dc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd12000000000000000000000000000000000000000000000000000000000000000d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsResultArray_total_update_line = [oddsResult_total_update_line];
		reqIdOdds_total_update_line =
			'0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		// create game props for total and spread
		nba_game_create =
			'0x00000000000000000000000000000000000000000000000000000000000000206536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf240000000000000000000000000000000000000000000000000000000000005b68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000625755f000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000d41746c616e7461204861776b73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011436861726c6f74746520486f726e657473000000000000000000000000000000';
		nba_create_array = [nba_game_create];
		dummyAddress = '0xb69e74324bc030f1b8889236efa461496d439226';

		oddsid_create_all = '0x6536306366613738303834366166363839373862343935373965356366333936';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "-20700",
			awayOdds: "17700",
			drawOdds: "0",
			spreadHome: "550",
			spreadHomeOdds: "-12000",
			spreadAway: "-550",
			spreadAwayOdds: "12000",
			totalOver: "2000",
			totalOverOdds: "-12000",
			totalUnder: "2000",
			totalUnderOdds: "12000"
			}
		 */
		oddsid_create_result_1 =
			'0x6536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf24000000000000000000000000000000000000000000000000000000000000452400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffddaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsid_create_result_array_1 = [oddsid_create_result_1];
		reqIdOdds_create_1 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';
		/**
		 * gameOdds = {
			gameId: "0x6536306366613738303834366166363839373862343935373965356366333936",
			homeOdds: "-20700",
			awayOdds: "17700",
			drawOdds: "0",
			spreadHome: "-550",
			spreadHomeOdds: "-12000",
			spreadAway: "-550",
			spreadAwayOdds: "12000",
			totalOver: "2000",
			totalOverOdds: "-12000",
			totalUnder: "2000",
			totalUnderOdds: "12000"
			}
		 */
		oddsid_create_result_2 =
			'0x6536306366613738303834366166363839373862343935373965356366333936ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf2400000000000000000000000000000000000000000000000000000000000045240000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffddaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000000226ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1200000000000000000000000000000000000000000000000000000000000004e20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd120';
		oddsid_create_result_array_2 = [oddsid_create_result_2];
		reqIdOdds_create_2 = '0x5bf0ea636f9515e1e1060e5a21e11ef8a628fa99b1effb8aa18624b02c6f36ed';

		playerPropsViaCLNode =
			'0x65363063666137383038343661663638393738623439353739653563663339363431373836333400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002500000000000000000000000000000000000000000000000000000000000001220000000000000000000000000000000000000000000000000000000000000001';

		TherundownConsumer = artifacts.require('TherundownConsumer');
		TherundownConsumerDeployed = await TherundownConsumer.new();

		await TherundownConsumerDeployed.initialize(
			owner,
			[sportId_4, sportId_16, sportId_7],
			SportPositionalMarketManager.address,
			[sportId_4, sportId_7],
			gamesQueue.address,
			[8, 11, 12], // resolved statuses
			[1, 2], // cancel statuses
			{ from: owner }
		);
		await Thales.transfer(TherundownConsumerDeployed.address, toUnit('1000'), { from: owner });

		let ConsumerVerifier = artifacts.require('TherundownConsumerVerifier');
		verifier = await ConsumerVerifier.new({ from: owner });

		await verifier.initialize(
			owner,
			TherundownConsumerDeployed.address,
			['TDB TDB', 'TBA TBA'],
			['create', 'resolve'],
			20,
			{
				from: owner,
			}
		);

		let GamesOddsObtainer = artifacts.require('GamesOddsObtainer');
		GamesOddsObtainerDeployed = await GamesOddsObtainer.new({ from: owner });

		await GamesOddsObtainerDeployed.initialize(
			owner,
			TherundownConsumerDeployed.address,
			verifier.address,
			SportPositionalMarketManager.address,
			[4, 16],
			{ from: owner }
		);

		let GamesOddsReceiver = artifacts.require('GamesOddsReceiver');
		GamesOddsReceiverDeployed = await GamesOddsReceiver.new({ from: owner });

		await GamesOddsReceiverDeployed.initialize(
			owner,
			TherundownConsumerDeployed.address,
			GamesOddsObtainerDeployed.address,
			[fourth],
			{ from: owner }
		);

		let GamesPlayerProps = artifacts.require('GamesPlayerProps');
		GamesPlayerPropsDeployed = await GamesPlayerProps.new({ from: owner });
		await GamesPlayerPropsDeployed.initialize(
			owner,
			TherundownConsumerDeployed.address,
			verifier.address,
			SportPositionalMarketManager.address,
			fourth, // dummy at beggining
			[4, 16],
			{ from: owner }
		);

		let GamesPlayerPropsReceiver = artifacts.require('GamesPlayerPropsReceiver');
		GamesPlayerPropsReceiverDeployed = await GamesPlayerPropsReceiver.new({ from: owner });

		await GamesPlayerPropsReceiverDeployed.initialize(
			owner,
			TherundownConsumerDeployed.address,
			GamesPlayerPropsDeployed.address,
			[fourth],
			{ from: owner }
		);

		await TherundownConsumerDeployed.setSportContracts(
			wrapper,
			gamesQueue.address,
			SportPositionalMarketManager.address,
			verifier.address,
			GamesOddsObtainerDeployed.address,
			GamesPlayerPropsDeployed.address,
			{ from: owner }
		);

		await GamesPlayerPropsDeployed.setContracts(
			TherundownConsumerDeployed.address,
			verifier.address,
			SportPositionalMarketManager.address,
			GamesPlayerPropsReceiverDeployed.address,
			{ from: owner }
		);
		await TherundownConsumerDeployed.addToWhitelist(third, true, { from: owner });
		await TherundownConsumerDeployed.addToWhitelist(SportPositionalMarketManager.address, true, {
			from: owner,
		});
		await SportPositionalMarketManager.setTherundownConsumer(TherundownConsumerDeployed.address, {
			from: manager,
		});
		await SportPositionalMarketManager.setOddsObtainer(GamesOddsObtainerDeployed.address, {
			from: manager,
		});
		await gamesQueue.setConsumerAddress(TherundownConsumerDeployed.address, { from: owner });
		await verifier.setObtainer(GamesOddsObtainerDeployed.address, { from: owner });
		await verifier.setSportsManager(SportPositionalMarketManager.address, { from: owner });
		await verifier.setPlayerPropsAddress(GamesPlayerPropsDeployed.address, { from: owner });
		await GamesOddsReceiverDeployed.addToWhitelist([third], true, { from: owner });
		await GamesPlayerPropsReceiverDeployed.setWrapperAddress(third, { from: owner });

		await GamesOddsObtainerDeployed.setContracts(
			TherundownConsumerDeployed.address,
			verifier.address,
			SportPositionalMarketManager.address,
			GamesOddsReceiverDeployed.address,
			{
				from: owner,
			}
		);

		await GamesPlayerPropsReceiverDeployed.addToWhitelist([third], true, { from: owner });
		await GamesPlayerPropsReceiverDeployed.setValidOptionsPerSport(4, [37, 38], true, {
			from: owner,
		});
		await SportPositionalMarketManager.setPlayerProps(GamesPlayerPropsDeployed.address, {
			from: manager,
		});
		await SportPositionalMarketManager.setSupportedSportForDoubleChance(
			[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
			true,
			{
				from: manager,
			}
		);
		await SportPositionalMarketManager.setIsDoubleChanceSupported(true, { from: manager });
		await gamesQueue.setConsumerAddress(TherundownConsumerDeployed.address, { from: owner });

		await SportPositionalMarketData.initialize(owner, { from: owner });

		await SportPositionalMarketData.setSportPositionalMarketManager(
			SportPositionalMarketManager.address,
			{ from: owner }
		);
		await SportPositionalMarketData.setSportsAMM(SportsAMM.address, { from: owner });

		let TestUSDC = artifacts.require('TestUSDC');
		testUSDC = await TestUSDC.new();
		testUSDT = await TestUSDC.new();

		let ERC20token = artifacts.require('Thales');
		testDAI = await ERC20token.new();

		let CurveSUSD = artifacts.require('MockCurveSUSD');
		curveSUSD = await CurveSUSD.new(
			Thales.address,
			testUSDC.address,
			testUSDT.address,
			testDAI.address
		);

		await testUSDC.mint(first, toUnit(1000));
		await testUSDC.mint(curveSUSD.address, toUnit(1000));
		await testUSDC.approve(SportsAMM.address, toUnit(1000), { from: first });

		ParlayAMM = await ParlayAMMContract.new({ from: manager });

		await ParlayAMM.initialize(
			owner,
			SportsAMM.address,
			SportPositionalMarketManager.address,
			parlayAMMfee,
			toUnit(maxSupportedAmount),
			toUnit(maxSupportedOdd),
			Thales.address,
			safeBox,
			safeBoxImpact,
			{ from: owner }
		);

		await ParlayAMM.setAmounts(
			toUnit(minUSDAmount),
			toUnit(maxSupportedAmount),
			toUnit(maxSupportedOdd),
			parlayAMMfee,
			safeBoxImpact,
			toUnit(0.05),
			toUnit(20000000),
			{
				from: owner,
			}
		);
		let nba_sgp_fee = toUnit(0.95);
		let soccer_sgp_fee = toUnit(0.8);
		let nfl_sgp_fee = toUnit(0.9);
		let nhl_sgp_fee = toUnit(0.85);

		await ParlayAMM.setSgpFeePerCombination(9004, 0, 10002, nba_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9004, 10002, 10001, nba_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9016, 0, 10002, soccer_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9016, 10001, 10002, soccer_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9002, 0, 10002, nfl_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9002, 10001, 10002, nfl_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9007, 0, 10002, nhl_sgp_fee, { from: owner });
		await ParlayAMM.setSgpFeePerCombination(9007, 10001, 10002, nhl_sgp_fee, { from: owner });

		await Thales.approve(ParlayAMM.address, toUnit('1000'), { from: first });
		await Thales.approve(ParlayAMM.address, toUnit('1000'), { from: second });
		await Thales.approve(ParlayAMM.address, toUnit('1000'), { from: third });

		ParlayMarketData = await ParlayMarketDataContract.new({ from: manager });
		ParlayVerifier = await ParlayVerifierContract.new({ from: manager });

		await ParlayMarketData.initialize(owner, ParlayAMM.address);

		await ParlayAMM.setAddresses(
			SportsAMM.address,
			safeBox,
			Referrals.address,
			ParlayMarketData.address,
			{ from: owner }
		);
		ParlayMarketMastercopy = await ParlayMarketContract.new({ from: manager });

		await ParlayAMM.setParlayMarketMastercopies(ParlayMarketMastercopy.address, { from: owner });
		await Thales.transfer(ParlayAMM.address, toUnit('20000'), { from: owner });

		await ParlayAMM.setParameters(5, { from: owner });

		let SportAMMLiquidityPoolContract = artifacts.require('SportAMMLiquidityPool');
		SportAMMLiquidityPool = await SportAMMLiquidityPoolContract.new();

		await SportAMMLiquidityPool.initialize(
			{
				_owner: owner,
				_sportsAmm: SportsAMM.address,
				_sUSD: Thales.address,
				_roundLength: WEEK,
				_maxAllowedDeposit: toUnit(100000).toString(),
				_minDepositAmount: toUnit(100).toString(),
				_maxAllowedUsers: 100,
			},
			{ from: owner }
		);
		await SportAMMLiquidityPool.setUtilizationRate(toUnit(1), {
			from: owner,
		});

		let SportAMMRiskManagerContract = artifacts.require('SportAMMRiskManager');
		SportAMMRiskManager = await SportAMMRiskManagerContract.new();

		await SportAMMRiskManager.initialize(
			owner,
			SportPositionalMarketManager.address,
			toUnit('5000'),
			[tagID_4],
			[toUnit('50000')],
			emptyArray,
			emptyArray,
			emptyArray,
			3,
			[tagID_4],
			[5],
			{ from: owner }
		);
		StakingThales = await StakingThalesContract.new({ from: manager });

		await SportsAMM.setAddresses(
			owner,
			Thales.address,
			TherundownConsumerDeployed.address,
			StakingThales.address,
			Referrals.address,
			ParlayAMM.address,
			wrapper,
			SportAMMLiquidityPool.address,
			SportAMMRiskManager.address,
			{ from: owner }
		);

		let aMMLiquidityPoolRoundMastercopy = await SportAMMLiquidityPoolRoundMastercopy.new();
		await SportAMMLiquidityPool.setPoolRoundMastercopy(aMMLiquidityPoolRoundMastercopy.address, {
			from: owner,
		});
		await Thales.transfer(firstLiquidityProvider, toUnit('10000000'), { from: owner });
		await Thales.approve(SportAMMLiquidityPool.address, toUnit('10000000'), {
			from: firstLiquidityProvider,
		});
		await SportAMMLiquidityPool.setWhitelistedAddresses([firstLiquidityProvider], true, {
			from: owner,
		});
		await SportAMMLiquidityPool.deposit(toUnit(100000), { from: firstLiquidityProvider });
		await SportAMMLiquidityPool.start({ from: owner });
		await SportAMMLiquidityPool.setDefaultLiquidityProvider(defaultLiquidityProvider, {
			from: owner,
		});
		await Thales.transfer(defaultLiquidityProvider, toUnit('10000000'), { from: owner });
		await Thales.approve(SportAMMLiquidityPool.address, toUnit('10000000'), {
			from: defaultLiquidityProvider,
		});

		Referrals.setSportsAMM(SportsAMM.address, ParlayAMM.address, { from: owner });

		await testUSDC.mint(first, toUnit(1000));
		await testUSDC.mint(curveSUSD.address, toUnit(1000));
		await testUSDC.approve(ParlayAMM.address, toUnit(1000), { from: first });
		// Parlay LP initializers:
		const ParlayAMMLiquidityPoolContract = artifacts.require('ParlayAMMLiquidityPool');
		const ParlayAMMLiquidityPoolRoundMastercopy = artifacts.require(
			'ParlayAMMLiquidityPoolRoundMastercopy'
		);

		ParlayAMMLiquidityPool = await ParlayAMMLiquidityPoolContract.new({ from: manager });

		await ParlayAMMLiquidityPool.initialize(
			{
				_owner: owner,
				_parlayAMM: ParlayAMM.address,
				_sUSD: Thales.address,
				_roundLength: WEEK,
				_maxAllowedDeposit: toUnit(100000).toString(),
				_minDepositAmount: toUnit(100).toString(),
				_maxAllowedUsers: 100,
			},
			{ from: owner }
		);
		await ParlayAMMLiquidityPool.setUtilizationRate(toUnit(1), {
			from: owner,
		});
		await ParlayAMM.setParlayLP(ParlayAMMLiquidityPool.address, { from: owner });

		let parlayAMMLiquidityPoolRoundMastercopy = await ParlayAMMLiquidityPoolRoundMastercopy.new();
		await ParlayAMMLiquidityPool.setPoolRoundMastercopy(
			parlayAMMLiquidityPoolRoundMastercopy.address,
			{
				from: owner,
			}
		);
		await Thales.transfer(firstParlayAMMLiquidityProvider, toUnit('10000000'), { from: owner });
		await Thales.approve(ParlayAMMLiquidityPool.address, toUnit('10000000'), {
			from: firstParlayAMMLiquidityProvider,
		});
		await ParlayAMMLiquidityPool.setWhitelistedAddresses([firstParlayAMMLiquidityProvider], true, {
			from: owner,
		});
		await ParlayAMMLiquidityPool.deposit(toUnit(100000), { from: firstParlayAMMLiquidityProvider });
		await ParlayAMMLiquidityPool.start({ from: owner });
		await ParlayAMMLiquidityPool.setDefaultLiquidityProvider(defaultParlayAMMLiquidityProvider, {
			from: owner,
		});
		await Thales.transfer(defaultParlayAMMLiquidityProvider, toUnit('10000000'), { from: owner });
		await Thales.approve(ParlayAMMLiquidityPool.address, toUnit('10000000'), {
			from: defaultParlayAMMLiquidityProvider,
		});

		const ParlayPolicyContract = artifacts.require('ParlayPolicy');
		ParlayPolicy = await ParlayPolicyContract.new({ from: manager });
		await ParlayPolicy.initialize(owner, ParlayAMM.address, { from: owner });
		await ParlayAMM.setVerifierAndPolicyAddresses(ParlayVerifier.address, ParlayPolicy.address, {
			from: owner,
		});
	});

	describe('Player props', () => {
		it('Create game and create player props for game', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);
			const tx_create_2 = await TherundownConsumerDeployed.createMarketForGame(gameid2);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);
			let marketAdd_2 = await TherundownConsumerDeployed.marketPerGameId(gameid2);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);
			answer = await SportPositionalMarketManager.getActiveMarketAddress('1');
			let deployedMarket_2 = await SportPositionalMarketContract.at(answer);

			assert.equal(deployedMarket_2.address, marketAdd_2);

			const tx_odds_child = await TherundownConsumerDeployed.fulfillGamesOdds(
				reqIdOdds_spread,
				oddsid_create_result_array_1,
				{
					from: wrapper,
				}
			);

			assert.bnEqual(2, await GamesOddsObtainerDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketSpreadChildMarket = await GamesOddsObtainerDeployed.mainMarketSpreadChildMarket(
				marketAdd,
				550
			);
			let mainMarketTotalChildMarket = await GamesOddsObtainerDeployed.mainMarketTotalChildMarket(
				marketAdd,
				20000
			);
			assert.bnEqual(
				mainMarketSpreadChildMarket,
				await GamesOddsObtainerDeployed.currentActiveSpreadChildMarket(marketAdd)
			);
			assert.bnEqual(
				mainMarketTotalChildMarket,
				await GamesOddsObtainerDeployed.currentActiveTotalChildMarket(marketAdd)
			);

			answer = await SportPositionalMarketManager.getActiveMarketAddress('2');
			let deployedMarket_6 = await SportPositionalMarketContract.at(answer);
			answer = await SportPositionalMarketManager.getActiveMarketAddress('3');
			let deployedMarket_7 = await SportPositionalMarketContract.at(answer);
			assert.equal(deployedMarket_6.address, mainMarketTotalChildMarket);
			assert.equal(deployedMarket_7.address, mainMarketSpreadChildMarket);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await GamesOddsReceiverDeployed.fulfillGamesOdds(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				[10300, -11300, 0],
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0],
				{
					from: third,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding player props

			assert.bnEqual(0, await GamesPlayerPropsDeployed.numberOfChildMarkets(marketAdd));

			const tx_playerProps = await GamesPlayerPropsReceiverDeployed.fulfillPlayerProps(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				['0x3431373836333400000000000000000000000000000000000000000000000000'],
				[37],
				['Nikola Jokic'],
				[285],
				[-11500, 11500],
				{
					from: third,
				}
			);
			const tx_playerProps2 = await GamesPlayerPropsReceiverDeployed.fulfillPlayerProps(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				['0x3431373835353500000000000000000000000000000000000000000000000000'],
				[37],
				['Michael Jordan'],
				[285],
				[-11500, 11500],
				{
					from: third,
				}
			);

			assert.bnEqual(2, await GamesPlayerPropsDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketPlayerPropsChild =
				await GamesPlayerPropsDeployed.mainMarketPlayerOptionLineChildMarket(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37,
					285
				);

			// console.log("Child prop: ",mainMarketPlayerPropsChild);
			// console.log("Main market: ",marketAdd);
			assert.bnEqual(
				mainMarketPlayerPropsChild,
				await GamesPlayerPropsDeployed.currentActiveChildMarketPerPlayerAndOption(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);
			let mainMarketPlayerPropsChild2 =
				await GamesPlayerPropsDeployed.mainMarketPlayerOptionLineChildMarket(
					marketAdd,
					'0x3431373835353500000000000000000000000000000000000000000000000000',
					37,
					285
				);

			// console.log("Child prop: ",mainMarketPlayerPropsChild);
			// console.log("Main market: ",marketAdd);
			assert.bnEqual(
				mainMarketPlayerPropsChild2,
				await GamesPlayerPropsDeployed.currentActiveChildMarketPerPlayerAndOption(
					marketAdd,
					'0x3431373835353500000000000000000000000000000000000000000000000000',
					37
				)
			);
			assert.bnEqual(
				marketAdd,
				await GamesPlayerPropsDeployed.childMarketMainMarket(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				true,
				await GamesPlayerPropsDeployed.normalizedOddsForMarketFulfilled(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				true,
				await GamesPlayerPropsDeployed.childMarketCreated(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				285,
				await GamesPlayerPropsDeployed.childMarketLine(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				mainMarketPlayerPropsChild,
				await GamesPlayerPropsDeployed.mainMarketChildMarketIndex(marketAdd, 0)
			);
			assert.bnEqual(
				1,
				await GamesPlayerPropsDeployed.numberOfChildMarketsPerPlayerAndOption(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);

			let allMarkets = await SportPositionalMarketManager.activeMarkets('0', '100');
			console.log(allMarkets.length);
			let market_1 = await SportPositionalMarketContract.at(allMarkets[0]);
			let market_2 = await SportPositionalMarketContract.at(allMarkets[1]);
			let market_3 = await SportPositionalMarketContract.at(allMarkets[2]);
			let market_4 = await SportPositionalMarketContract.at(allMarkets[3]);
			let market_5 = await SportPositionalMarketContract.at(allMarkets[4]);
			let market_6 = await SportPositionalMarketContract.at(allMarkets[5]);

			parlayMarkets = [market_5, market_6];

			console.log('M1: ', await market_1.getGameDetails());
			console.log('M2: ', await market_2.getGameDetails());
			console.log('M3: ', await market_3.getGameDetails());
			console.log('M4: ', await market_4.getGameDetails());
			console.log('M5: ', await market_5.getGameDetails());
			console.log('M5: ', await market_6.getGameDetails());

			assert.equal(9004, await market_1.tags(0));
			assert.equal(9004, await market_2.tags(0));
			assert.equal(9004, await market_5.tags(0));

			await fastForward(game1NBATime - (await currentTime()) - SECOND);
			// await fastForward((await currentTime()) - SECOND);
			answer = await SportPositionalMarketManager.numActiveMarkets();
			assert.equal(answer.toString(), '6');
			let totalSUSDToPay = toUnit('10');
			parlayPositions = ['1', '1'];
			let parlayPositions2 = ['1', '1', '1', '1', '0'];
			let parlayMarketsAddress = [];
			for (let i = 0; i < parlayMarkets.length - 1; i++) {
				parlayMarketsAddress[i] = parlayMarkets[i].address.toString().toUpperCase();
				parlayMarketsAddress[i] = parlayMarkets[i].address.toString().replace('0X', '0x');
			}
			let slippage = toUnit('0.01');

			// await expect(
			// 		ParlayAMM.buyQuoteFromParlay(parlayMarketsAddress, parlayPositions, totalSUSDToPay)
			// 	).to.be.revertedWith('SameTeamOnParlay');

			result = await ParlayAMM.buyQuoteFromParlay(
				parlayMarketsAddress,
				parlayPositions,
				totalSUSDToPay
			);
			console.log('result: ', result);

			// await ParlayPolicy.setRestrictedMarketsCountPerTag(9016, 1, { from: owner });
			// await ParlayPolicy.setRestrictedTagCombos(9007, 9016, 1, 1, { from: owner });

			// let buyParlayTX = await ParlayAMM.buyFromParlay(
			// 	parlayMarketsAddress,
			// 	parlayPositions,
			// 	totalSUSDToPay,
			// 	slippage,
			// 	result[1],
			// 	ZERO_ADDRESS,
			// 	{ from: first }
			// );
			// // console.log("event: \n", buyParlayTX.logs[0]);

			// assert.eventEqual(buyParlayTX.logs[2], 'ParlayMarketCreated', {
			// 	account: first,
			// 	sUSDPaid: totalSUSDToPay,
			// });
		});

		it('Create game and create player props for game, change odds', async () => {
			await fastForward(game1NBATime - (await currentTime()) - SECOND);

			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(false, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			// req. games
			const tx = await TherundownConsumerDeployed.fulfillGamesCreated(
				reqIdCreate,
				gamesCreated,
				sportId_4,
				game1NBATime,
				{ from: wrapper }
			);

			assert.equal(gameid1, await gamesQueue.gamesCreateQueue(1));
			assert.equal(gameid2, await gamesQueue.gamesCreateQueue(2));

			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid1));
			assert.equal(sportId_4, await TherundownConsumerDeployed.sportsIdPerGame(gameid2));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid1));
			assert.bnEqual(1649890800, await gamesQueue.gameStartPerGameId(gameid2));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));
			assert.bnEqual(true, await TherundownConsumerDeployed.isSportOnADate(game1NBATime, 4));

			assert.equal(true, await TherundownConsumerDeployed.isSportTwoPositionsSport(sportId_4));
			assert.equal(true, await TherundownConsumerDeployed.supportedSport(sportId_4));

			let result = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(-20700, result[0]);
			assert.bnEqual(17700, result[1]);

			let game = await TherundownConsumerDeployed.gameCreated(gameid1);
			let gameTime = game.startTime;
			assert.equal('Atlanta Hawks', game.homeTeam);
			assert.equal('Charlotte Hornets', game.awayTeam);

			// check if event is emited
			assert.eventEqual(tx.logs[0], 'GameCreated', {
				_requestId: reqIdCreate,
				_sportId: sportId_4,
				_id: gameid1,
				_game: game,
			});

			// create markets
			const tx_create = await TherundownConsumerDeployed.createMarketForGame(gameid1);

			let marketAdd = await TherundownConsumerDeployed.marketPerGameId(gameid1);

			// check if event is emited
			assert.eventEqual(tx_create.logs[1], 'CreateSportsMarket', {
				_marketAddress: marketAdd,
				_id: gameid1,
				_game: game,
			});

			let answer = await SportPositionalMarketManager.getActiveMarketAddress('0');
			deployedMarket = await SportPositionalMarketContract.at(answer);

			assert.equal(false, await deployedMarket.canResolve());
			assert.equal(9004, await deployedMarket.tags(0));

			// invalid odds zero as draw
			const tx_odds = await GamesOddsReceiverDeployed.fulfillGamesOdds(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				[10300, -11300, 0],
				[0, 0],
				[0, 0],
				[0, 0],
				[0, 0],
				{
					from: third,
				}
			);

			let result_final = await GamesOddsObtainerDeployed.getOddsForGame(gameid1);
			assert.bnEqual(10300, result_final[0]);
			assert.bnEqual(-11300, result_final[1]);
			assert.bnEqual(0, result_final[2]);

			// adding player props

			assert.bnEqual(0, await GamesPlayerPropsDeployed.numberOfChildMarkets(marketAdd));

			const tx_playerProps = await GamesPlayerPropsReceiverDeployed.fulfillPlayerProps(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				['0x3431373836333400000000000000000000000000000000000000000000000000'],
				[37],
				['Nikola Jokic'],
				[285],
				[-11500, 11500],
				{
					from: third,
				}
			);

			let props = await GamesPlayerPropsDeployed.getPlayerPropForOption(
				'0x6536306366613738303834366166363839373862343935373965356366333936',
				'0x3431373836333400000000000000000000000000000000000000000000000000',
				37
			);

			assert.bnEqual(285, props[0]);
			assert.bnEqual(-11500, props[1]);
			assert.bnEqual(11500, props[2]);
			assert.bnEqual(false, props[3]);

			let propsArray = await verifier.getPlayerPropForOption(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				['0x3431373836333400000000000000000000000000000000000000000000000000'],
				[37]
			);

			let prop1 = propsArray[0];
			let prop2 = propsArray[1];
			let prop3 = propsArray[2];

			assert.bnEqual(-11500, prop1[0]);
			assert.bnEqual(11500, prop1[1]);
			assert.bnEqual(285, prop2[0]);
			assert.bnEqual(false, prop3[0]);

			assert.bnEqual(1, await GamesPlayerPropsDeployed.numberOfChildMarkets(marketAdd));
			let mainMarketPlayerPropsChild =
				await GamesPlayerPropsDeployed.mainMarketPlayerOptionLineChildMarket(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37,
					285
				);
			assert.bnEqual(
				mainMarketPlayerPropsChild,
				await GamesPlayerPropsDeployed.currentActiveChildMarketPerPlayerAndOption(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);
			assert.bnEqual(
				marketAdd,
				await GamesPlayerPropsDeployed.childMarketMainMarket(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				true,
				await GamesPlayerPropsDeployed.normalizedOddsForMarketFulfilled(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				true,
				await GamesPlayerPropsDeployed.childMarketCreated(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				285,
				await GamesPlayerPropsDeployed.childMarketLine(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				mainMarketPlayerPropsChild,
				await GamesPlayerPropsDeployed.mainMarketChildMarketIndex(marketAdd, 0)
			);
			assert.bnEqual(
				1,
				await GamesPlayerPropsDeployed.numberOfChildMarketsPerPlayerAndOption(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);

			await GamesPlayerPropsReceiverDeployed.fulfillPlayerProps(
				['0x6536306366613738303834366166363839373862343935373965356366333936'],
				['0x3431373836333400000000000000000000000000000000000000000000000000'],
				[37],
				['Nikola Jokic'],
				[285],
				[-10500, 11500],
				{
					from: third,
				}
			);
			assert.bnEqual(1, await GamesPlayerPropsDeployed.numberOfChildMarkets(marketAdd));
			assert.bnEqual(
				1,
				await GamesPlayerPropsDeployed.numberOfChildMarketsPerPlayerAndOption(
					marketAdd,
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);
			assert.bnEqual(
				'0x6536306366613738303834366166363839373862343935373965356366333936',
				await GamesPlayerPropsDeployed.gameIdPerChildMarket(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				'0x3431373836333400000000000000000000000000000000000000000000000000',
				await GamesPlayerPropsDeployed.playerIdPerChildMarket(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(
				37,
				await GamesPlayerPropsDeployed.optionIdPerChildMarket(mainMarketPlayerPropsChild)
			);
			assert.bnEqual(false, await GamesPlayerPropsDeployed.mainMarketPausedPlayerProps(marketAdd));
			assert.bnEqual(
				true,
				await GamesPlayerPropsDeployed.createFulfilledForPlayerProps(
					'0x6536306366613738303834366166363839373862343935373965356366333936',
					'0x3431373836333400000000000000000000000000000000000000000000000000',
					37
				)
			);
		});
	});
});
